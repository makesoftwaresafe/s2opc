/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*! \mainpage S2OPC Toolkit API
 *
\section Introduction

The S2OPC OPC UA Toolkit provides a Client/Server C source code implementation including an OPC UA communication
stack, B model and C source code implementation for a minimal set of services and a cryptographic library adaptation for
OPC UA needs (using mbedtls). S2OPC also provides a PubSub C source code implementation, it shares some components with
Client/Server part (cryptographic services, OPC UA types, etc.).

For further details on supported features see the <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/README.md">README.md file</a> content.
Additional information on how to build, configure and use S2OPC is also available on <a href="https://gitlab.com/systerel/S2OPC/-/wikis/home">the wiki</a>.


The following sections only concern the C source documentation.

You will find documentation on the Python binding for S2OPC on following page:
<a href="pys2opc/index.html">Go to PyS2OPC documentation</a>

\section common High-level Common API

The high-level common API shall be used to initialize (or clear) the S2OPC toolkit prior to use (or after using) the high-level client/server API.
Those functions are shared between high-level server/client API:
- ::SOPC_CommonHelper_Initialize shall be called before any other high-level API function to initialize S2OPC client/server tooklit.
- ::SOPC_CommonHelper_Clear shall be called after any other high-level API function to clear S2OPC client/server tooklit.
- ::SOPC_CommonHelper_GetBuildInfo provides S2OPC client/server toolkit build info.

\section server High-level Server API

The high-level server API provides functions for configuration (endpoints and security, address space content, user management, etc.) and functions to manage server execution (start/stop, local service execution, etc.).

The main configuration functions are defined by libs2opc_server_config.h:
- ::SOPC_HelperConfigServer_Initialize shall be called before any other function of the server wrapper module (and after ::SOPC_CommonHelper_Initialize).
- ::SOPC_HelperConfigServer_Clear shall be called when server wrapper module is not used anymore.
- ::SOPC_HelperConfigServer_ConfigureFromXML loads configuration from XML configuration files (server endpoints and security, address space, users). See \ref xml_config "XML file examples".
- ::SOPC_HelperConfigServer_SetMethodCallManager sets a manager for callbacks to use for CallMethod service (available only if s2opc is compiled with WITH_NANO_EXTENDED=1).
- ::SOPC_HelperConfigServer_SetWriteNotifCallback sets a callback to receive notification on address space write operations from clients.
- ::SOPC_HelperConfigServer_SetLocalServiceAsyncResponse sets a callback to use local services on server in an asynchronous way (see ::SOPC_ServerHelper_LocalServiceAsync).

In case the dedicated XML configuration files are not used to configure server, use the additional configuration functions located in libs2opc_server_config_custom.h.

The main functions for server execution are defined by libs2opc_server.h:
- ::SOPC_ServerHelper_StartServer: starts the server asynchronously, it runs until requested to stop.
- ::SOPC_ServerHelper_StopServer: stops the server.
- ::SOPC_ServerHelper_Serve synchronous alternative to ::SOPC_ServerHelper_StartServer, it blocks until server stopped.
- ::SOPC_ServerHelper_LocalServiceAsync: execute a local service (read, write, etc.) on server asynchronously, service response is provided through callback defined with ::SOPC_HelperConfigServer_SetLocalServiceAsyncResponse.
- ::SOPC_ServerHelper_LocalServiceSync: execute a local service (read, write, etc.) on server synchronously.

See implementation examples
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/demo_server/toolkit_demo_server.c">toolkit_demo_server.c</a> (XML configuration only),
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/ClientServer/validation_tests/server/toolkit_test_server_local_service.c">toolkit_test_server_local_service.c</a> (local services),
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/ClientServer/validation_tests/server/toolkit_test_server.c">toolkit_test_server.c</a> (both XML and non-XML configuration)
or <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/ClientServer/validation_tests/client/toolkit_test_server_client.c">toolkit_test_server_client.c</a> (both client and server).

\anchor xml_config
See XML configuration schemas and examples:
- Server endpoints and security <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_config.xsd">XSD schema</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Server_Demo_Config.xml">XML example</a>
- Address space <a href="http://opcfoundation.org/UA/2011/03/UANodeSet.xsd">XSD schema</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/address_space/s2opc_nano.xml">XML example</a>
- Users <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_users_config.xsd">XSD schema</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Users_Demo_Config.xml">XML example</a>

\section sclient Simplified Client API

The simplified client interface consists of functions to configure the connection, to establish the connection, to call GetEndpoint, Write, Read and Browse services, and to create a Subscription and add MonitoredItems to it.

The simplified interface functions and types are defined by libs2opc_client_cmds.h.
- ::SOPC_ClientHelper_Initialize shall be called before any other function of the module (and after ::SOPC_CommonHelper_Initialize).
- ::SOPC_ClientHelper_Finalize shall be called when module not used anymore.
- ::SOPC_ClientHelper_GetEndpoints: calls GetEndpoints service of a server and returns when server response received or error occurred (connection failure, response timeout).
- ::SOPC_ClientHelper_CreateConfiguration: creates a connection configuration (security properties, session user, etc.) to be used for non-discovery services.
- ::SOPC_ClientHelper_CreateConnection: creates a connection (secure channel + session) to the server given the connection configuration identifier created previously.
- ::SOPC_ClientHelper_Disconnect: disconnect the previously created connection given the connection identifier.
- ::SOPC_ClientHelper_Write: calls Write service through given connection and returns when server response received.
- ::SOPC_ClientHelper_Read: calls Read service through given connection and returns when server response received.
- ::SOPC_ClientHelper_Browse: calls Browse service through given connection and returns when server response received.
- ::SOPC_ClientHelper_CreateSubscription: calls CreateSubscription service through given connection. The subscription is created and publish requests / responses automatically managed by the client helper.
- ::SOPC_ClientHelper_AddMonitoredItems: calls CreateMonitoredItem service through given connection with a subscription successfully created previously.
- ::SOPC_ClientHelper_Unsubscribe: stops the subscription associated to the given connection.

See implementation examples
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/client_wrapper/examples">\<service>.c</a>
or <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/client_wrapper/client_subscription.c">client_subscription.c</a>.

\section lclient Low-level client API

Main configuration functions and types for client are provided by sopc_toolkit_config.h and sopc_user_app_itf.h.
The functions with `SOPC_ToolkitServer_` prefix shall be ignored.

- (Optional) log configuration with ::SOPC_Common_Initialize
- ::SOPC_Toolkit_Initialize initializes the toolkit and configure the ::SOPC_ComEvent_Fct application callback to manage received events from toolkit.
- ::SOPC_ToolkitClient_AddSecureChannelConfig adds a new secure channel configuration (::SOPC_SecureChannel_Config).
  In case security is used, the default PKI provider might be used (sopc_pki_stack.h) and certficates shall be loaded (sopc_key_manager.h).
- ::SOPC_Toolkit_Clear shall be called when toolkit is not used anymore.

Once toolkit is intitialized and a secure channel configuration is added, the client is able to establish connection:
- ::SOPC_ToolkitClient_AsyncActivateSession to establish a secure channel and activate a session with given user token.
- ::SOPC_ToolkitClient_AsyncActivateSession_Anonymous simplified version of ::SOPC_ToolkitClient_AsyncActivateSession for anonymous user.
- ::SOPC_ToolkitClient_AsyncActivateSession_UsernamePassword simplified version of ::SOPC_ToolkitClient_AsyncActivateSession for using UserName.

Session activation result is provided by event ::SE_ACTIVATED_SESSION through the configured ::SOPC_ComEvent_Fct callback, resulting session identifier is necessary to send requests through a session.

It is also possible to send discovery services requests to through a configured connection without session using:
- ::SOPC_ToolkitClient_AsyncSendDiscoveryRequest establishes a secure channel without session and send the given request. Response received with event ::SE_RCV_DISCOVERY_RESPONSE  through ::SOPC_ComEvent_Fct callback.

Once a session has been activated it will be possible to send all kind of requests using the session identifier to call:
- ::SOPC_ToolkitClient_AsyncSendRequestOnSession. Response are received with event ::SE_RCV_SESSION_RESPONSE through ::SOPC_ComEvent_Fct callback.

\note The client API provides raw OPC UA responses to the OPC UA requests sent. Only the secure channel and session services are automatically managed by toolkit. See \ref sclient for automated subscription service support.

See implementation examples
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/ClientServer/validation_tests/client/toolkit_test_client.c">toolkit_test_client.c</a>,
and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/demo_client/">command line tools s2opc_<service>.c</a> for dedicated services (read, write, etc.).

\section lserver Low-level server API

Main configuration function and types for server are provided by sopc_toolkit_config.h and sopc_user_app_itf.h.
The functions with `SOPC_ToolkitClient_` prefix shall be ignored.

Some are shared with \ref lclient configuration:
- (Optional) log configuration with ::SOPC_Common_Initialize
- ::SOPC_Toolkit_Initialize initializes the toolkit and configure the ::SOPC_ComEvent_Fct application callback to manage received events from toolkit.
- ::SOPC_ToolkitServer_Configured shall be called once all the configuration steps are terminated.
- ::SOPC_Toolkit_Clear shall be called when toolkit is not used anymore.

For main server configuration there are 2 possible options. The first is to use the XML configuration parser:
- Configure with XML file (<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_config.xsd">XSD schema</a>, <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Server_Demo_Config.xml">XML example</a>) using ::SOPC_Config_Parse, it produces a pre-filled ::SOPC_S2OPC_Config.
- In case security is used, the default PKI provider might be used (sopc_pki_stack.h) and certificates shall be loaded (sopc_key_manager.h) into SOPC_S2OPC_Config (SOPC_Server_Config::pki, SOPC_Server_Config::serverCertificate, SOPC_Server_Config::serverKey) using certificates paths from ::SOPC_Server_Config.

The second is to allocate a ::SOPC_S2OPC_Config structure and to initialize it using ::SOPC_S2OPC_Config_Initialize function, then initialize all ::SOPC_Server_Config fields manually.

In both cases the \ref users shall be configured for each ::SOPC_Endpoint_Config in SOPC_Server_Config::endpoints and the \ref methods shall be configured if CallMethod service shall be supported.

Finally for each endpoint of the server (SOPC_Server_Config::endpoints), ::SOPC_ToolkitServer_AddEndpointConfig shall be called to configure it in the server.

\subsection address Configure initial address space

Address space configuration shall be done to define the initial data present in the address space.
This configuration shall be defined using <a href="http://opcfoundation.org/UA/2011/03/UANodeSet.xsd">OPC UA standard schema</a>.
An example is provided for <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/address_space/s2opc_nano.xml">a nano server</a>
and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/address_space/s2opc.xml">a nano extended server</a>.

All the reciprocal references between nodes shall be present in it. The script <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/scripts/gen-reciprocal-refs-address-space.xslt">gen-reciprocal-refs-address-space.xslt</a> might be used to generate reciprocal references missing (XSLT 2.0 processor required).

Once the XML address space is defined, the C structure to be used for toolkit configuration shall be generated.
It could be done using the Python C code generator prior to compilation or using the dynamic XML loader.

Use the XML dynamic loader ::SOPC_UANodeSet_Parse to convert at runtime a UANodeSet XML file to expected C structure to be configured with ::SOPC_ToolkitServer_SetAddressSpaceConfig.<br/>
Or use the Python script <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/scripts/generate-s2opc-address-space.py">generate-s2opc-address-space.py</a> to convert a UANodeSet XML file into a C file that can be compiled in the binary, and retrieved with the embedded address space loader ::SOPC_Embedded_AddressSpace_Load.

Finally call ::SOPC_ToolkitServer_SetAddressSpaceConfig with the address space structure to configure the server address space content
and set the client write notification callback with ::SOPC_ToolkitServer_SetAddressSpaceNotifCb to receive notification on client write operation.

\subsection address2 Configure address space update

Once the initial address space is configured, you might want to configure behavior on address space update from client or to configure how to update address space locally.

The server application will be notified of address space changes, it only needs to configure the associated callback using ::SOPC_ToolkitServer_SetAddressSpaceNotifCb with the ::SOPC_AddressSpaceNotif_Fct application callback to manage received ::AS_WRITE_EVENT events from toolkit.

The server application is able to modify the address space on runtime using OPC UA services locally.
It is allowed to treat OPC UA service requests (::OpcUa_ReadRequest, ::OpcUa_WriteRequest, ::OpcUa_BrowseRequest and discovery service requests) using ::SOPC_ToolkitServer_AsyncLocalServiceRequest.
Once the function is called, an asynchronous ::SE_LOCAL_SERVICE_RESPONSE event will be received by the ::SOPC_ComEvent_Fct application callback containing the response message (::OpcUa_ReadResponse, etc.).

\subsection users User authentication and user authorization managers

User authentication and user authorization managers shall be implemented for each endpoint (SOPC_Endpoint_Config::authenticationManager and SOPC_Endpoint_Config::authorizationManager).

Default implementations accepting any user for authentication (::SOPC_UserAuthentication_CreateManager_AllowAll) and authorization (::SOPC_UserAuthorization_CreateManager_AllowAll) are provided for development use.
Otherwise either application implements its own functions (::SOPC_UserAuthentication_ValidateUserIdentity_Func and ::SOPC_UserAuthorization_AuthorizeOperation_Func) depending on its needs (LDAP, etc.) or a simple implementation based on XML user management configuration file loading is provided.

In the latter case use the parser for XML user management configuration file (<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_users_config.xsd">XSD schema</a>, <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Users_Demo_Config.xml">XML example</a>) ::SOPC_UsersConfig_Parse and set result in ::SOPC_Endpoint_Config.

\note The toolkit does not provide default implementation to encrypt/decrypt the user credentials which means a Secure Channel with SignAndEncrypt security mode and None user security policy shall be used.

\subsection methods Method call manager configuration

If the MethodCall service shall be supported, it is necessary to define a method call manager ::SOPC_MethodCallManager.
A basic implementation is provided by ::SOPC_MethodCallManager_Create, this manager provides the function ::SOPC_MethodCallManager_AddMethod to define method implementation through ::SOPC_MethodCallFunc_Ptr callback.

\section pubsub PubSub API

Examples of Pub or Sub test applications can be found here <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/PubSub/validation_tests/pub_scheduler_test.c">publisher</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/PubSub/validation_tests/sub_scheduler_conf_test.c">subscriber</a>, and a PubSub-Server sample is implemented <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/PubSub_ClientServer/pubsub_server">here</a>.

Main interface is defined by sopc_pub_scheduler.h and sopc_sub_scheduler.h.

\subsection pubsub_config Configuration API
The PubSub configuration API is provided through sopc_pubsub_conf.h and uses the concepts of OPC UA PubSub specification Common Configuration Model (see §9.1 in OPC UA part 14 v1.04) to define the following elements configuration:
PubSubConnection, ReaderGroup, DataSetReader, SecurityMode,  SecurityKeyServices, FieldTarget, FieldMetaData, PublishedDataSet, WriterGroup, WriterDataSet, PublishedDataSet, PublishedDataSetSource, PublishedVariable.

The protocol to use is automatically deduced from the PubSubConnection address prefix (only UDP, Ethernet and MQTT supported for now).
The configuration might be generated by parsing an XML configuration file, with <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_pubsub_config.xsd">XSD schema format</a>, using the function ::SOPC_PubSubConfig_ParseXML.

\subsection pubsub_handlers Configure data source/target handlers

For a Publisher application, a data source handler shall be defined to retrieve the data from configured information in the PublishedDataSet.
The handler shall be built using ::SOPC_PubSourceVariableConfig_Create, by providing a function with the signature ::SOPC_GetSourceVariables_Func, and shall then be provided on Publisher start.

For a Subscriber application, a data target handler shall be defined to set the data from configured information in the DataSetReader.
The handler shall be built using ::SOPC_SubTargetVariableConfig_Create by providing a function with the signature ::SOPC_SetTargetVariables_Func, and shall then be provided on Subscriber start.

\subsection pubsub_lifecycle PubSub lifecycle

The Publisher lifecycle is managed through the functions ::SOPC_PubScheduler_Start and ::SOPC_PubScheduler_Stop.
And the Subscriber lifecycle is managed through the functions ::SOPC_SubScheduler_Start and ::SOPC_SubScheduler_Stop.
The Subscriber state changes might be received by providing a handler with the signature ::SOPC_SubscriberStateChanged_Func.

\note The PubSub library part is only supported for POSIX platform for the moment.

\section config_constants OPC UA stack behavior configuration constants

Two sets of constants are defined to configure the OPC UA stack behavior, one is defined for the OPC UA common encoding layer and another for the OPC UA Client/Server services layer.
Those variables might be changed for specific needs at library compile time and are defined in respectively in sopc_common_constants.h and sopc_toolkit_config_constants.h.

 */
