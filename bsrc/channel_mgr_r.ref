/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

REFINEMENT
    channel_mgr_r

REFINES
    channel_mgr

SEES
    constants,
    constants_statuscodes_bs

DEFINITIONS
    d_variables ==

    s_cli_channel_connecting,
    s_cli_channel_disconnecting,
    s_channel_connected,
    a_channel_connected_time,
    a_config,
    a_endpoint,
    a_SecurityPolicy

ABSTRACT_VARIABLES
    d_variables

INITIALISATION
    s_cli_channel_connecting    := {} ||
    s_cli_channel_disconnecting := {} ||
    s_channel_connected         := {} ||
    a_channel_connected_time    := {} ||
    a_config                    := {} ||
    a_endpoint                  := {} ||
    a_SecurityPolicy            := {}

OPERATIONS

    bres <-- cli_open_secure_channel (config_idx, is_one_sc_auto_closing) =
    BEGIN
       IF  config_idx /: dom(a_config~) &
           card(s_cli_channel_connecting) + card(s_channel_connected) /= card(t_channel) & /* No slot remaining */
           (card(s_cli_channel_connecting) + card(s_channel_connected) /= card(t_channel) - 1
            or is_one_sc_auto_closing = TRUE)  /* 1 slot is always kept for auto closing evaluation
                                                 (if a SC is already auto closing it is used because 1 will be released soon) */
       THEN
           s_cli_channel_connecting := s_cli_channel_connecting \/ {config_idx} ||
           bres := TRUE
       ELSE
           bres := FALSE
       END
    END
    ;

    bres <-- srv_new_secure_channel (endpoint_config_idx, channel_config_idx, channel, is_one_sc_auto_closing) =
    BEGIN
        IF channel /: s_channel_connected &
            channel_config_idx /: ran(a_config) &
            card(s_cli_channel_connecting) + card(s_channel_connected) /= card(t_channel) & /* No slot remaining */
           (card(s_cli_channel_connecting) + card(s_channel_connected) /= card(t_channel) - 1
            or is_one_sc_auto_closing = TRUE)  /* 1 slot is always kept for auto closing evaluation
                                                 (if a SC is already auto closing it is used because 1 will be released soon) */
        THEN
            s_channel_connected := s_channel_connected \/ {channel} ||
            a_config(channel)   := channel_config_idx ||
            a_endpoint(channel) := endpoint_config_idx ||
            /* a_SecurityPolicy(channel) :: t_SecurityPolicy */
            a_SecurityPolicy
            :(
                a_SecurityPolicy : s_channel_connected --> t_SecurityPolicy &
                {channel} <<| a_SecurityPolicy = {channel} <<| a_SecurityPolicy$0 &
                channel : dom(a_SecurityPolicy)
             ) ||
            bres := TRUE
        ELSE
            bres := FALSE
        END
    END;

    close_secure_channel (channel) =
    PRE
        channel : t_channel_i &
        channel : t_channel
    THEN
        IF channel : s_channel_connected & channel /: dom(a_endpoint)
        THEN
            /* client case only */
            s_cli_channel_disconnecting := s_cli_channel_disconnecting \/ {a_config(channel)}
        END
    END;

    channel_lost (channel) =
    BEGIN
        IF channel : s_channel_connected
        THEN
            s_channel_connected         := s_channel_connected - {channel}                   ||
            s_cli_channel_disconnecting := s_cli_channel_disconnecting - {a_config(channel)} ||
            a_config                    := {channel} <<| a_config                            ||
            a_endpoint                  := {channel} <<| a_endpoint                          ||
            a_SecurityPolicy            := {channel} <<| a_SecurityPolicy
        END
    END
    ;

    bres <-- cli_set_connected_channel (config_idx, channel) =
    BEGIN
        IF  config_idx : s_cli_channel_connecting &
            channel /: s_channel_connected
        THEN
            s_cli_channel_connecting := s_cli_channel_connecting - {config_idx} ||
            s_channel_connected      := s_channel_connected \/ {channel}        ||
            a_config(channel)        := config_idx                              ||
            /* a_SecurityPolicy(channel) :: t_SecurityPolicy */
            a_SecurityPolicy
            :(
                a_SecurityPolicy : s_channel_connected --> t_SecurityPolicy       &
                {channel} <<| a_SecurityPolicy = {channel} <<| a_SecurityPolicy$0 &
                channel : dom(a_SecurityPolicy)
             ) ||
            bres := TRUE
        ELSE
            bres := FALSE
        END
    END
    ;

    bres <-- cli_set_connection_timeout_channel (config_idx) =
    BEGIN
        IF config_idx : s_cli_channel_connecting
        THEN
            s_cli_channel_connecting := s_cli_channel_connecting - {config_idx} ||
            bres := TRUE
        ELSE
            bres := FALSE
        END
    END

END
