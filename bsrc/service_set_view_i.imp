/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    service_set_view_i

REFINES
    service_set_view

IMPORTS
    service_browse_it,
    msg_browse_bs,
    msg_browse_next_bs,
    translate_browse_path,
    translate_browse_path_it

SEES
    constants,
    constants_statuscodes_bs,
    message_in_bs,
    message_out_bs

LOCAL_OPERATIONS

    StatusCode_service <-- treat_browse_request_BrowseValues(p_session, p_req_msg, p_resp_msg, p_nid_view, p_nb_target_max, p_nb_browse_value) =
    PRE
        p_session : t_session_i &
        p_req_msg : t_msg_i &
        p_req_msg : t_msg &
        p_req_msg = c_msg_in &
        a_msg_in_type = e_msg_view_browse_req &
        p_resp_msg : t_msg_i &
        p_resp_msg : t_msg &
        p_resp_msg = c_msg_out &
        a_msg_out_type = e_msg_view_browse_resp &

        p_nid_view : t_NodeId_i &
        p_nb_target_max : NAT &
        p_nb_browse_value : NAT
    THEN
        StatusCode_service,
        ResponseBrowse_BrowseStatus,
        ResponseBrowse_ContinuationPoint,
        ResponseBrowse_ResultReferences,
        isBrowseResponseAllocated
        :(
            ResponseBrowse_BrowseStatus        : t_BrowseValue +-> t_StatusCode        &
            ResponseBrowse_ContinuationPoint   : t_BrowseValue +-> t_ContinuationPointId_i &
            ResponseBrowse_ResultReferences    : t_BrowseValue +-> t_BrowseResultReferences &
            isBrowseResponseAllocated : BOOL &

            StatusCode_service : {e_sc_ok, e_sc_bad_out_of_memory, e_sc_bad_nothing_to_do, e_sc_bad_too_many_ops, e_sc_bad_view_id_unknown} &

            (StatusCode_service = e_sc_ok =>
                isBrowseResponseAllocated = TRUE &
                ResponseBrowse_BrowseStatus : cast_t_BrowseValue[1..p_nb_browse_value] --> t_StatusCode &
                !p_index.(p_index : cast_t_BrowseValue[1..p_nb_browse_value] &
                          (ResponseBrowse_BrowseStatus(p_index) = e_sc_ok or
                           ResponseBrowse_BrowseStatus(p_index) = e_sc_bad_no_continuation_points) =>
                            p_index : dom(ResponseBrowse_ContinuationPoint) &
                            p_index : dom(ResponseBrowse_ResultReferences) &
                          (ResponseBrowse_BrowseStatus(p_index) = e_sc_bad_no_continuation_points =>
                            ResponseBrowse_ContinuationPoint(p_index) = c_ContinuationPointId_indet)
                ) &
                !p_index.(p_index : cast_t_BrowseValue[1..p_nb_browse_value] & ResponseBrowse_BrowseStatus(p_index) /= e_sc_ok =>
                    p_index /: dom(ResponseBrowse_ContinuationPoint) &
                    p_index /: dom(ResponseBrowse_ResultReferences)
                )

            ) &
            (StatusCode_service /= e_sc_ok => isBrowseResponseAllocated = FALSE)
        )
    END
    ;

    treat_browse_request_BrowseValue_1(p_session, p_req_msg, p_resp_msg, p_nid_view, p_nb_target_max, p_bvi, p_autoReleaseCP) =
    PRE
        RequestBrowse_nb_BrowseValue > 0 &
        RequestBrowse_nb_BrowseValue <= k_n_BrowseResponse_max &

        p_session : t_session_i &
        p_req_msg : t_msg_i &
        p_req_msg : t_msg &
        p_req_msg = c_msg_in &
        a_msg_in_type = e_msg_view_browse_req &
        p_resp_msg : t_msg_i &
        p_resp_msg : t_msg &
        p_resp_msg = c_msg_out &
        a_msg_out_type = e_msg_view_browse_resp &

        p_nid_view : t_NodeId_i &
        p_nb_target_max : NAT &

        p_bvi           : t_BrowseValue_i &
        p_bvi           : t_BrowseValue &
        p_bvi           : cast_t_BrowseValue[1..RequestBrowse_nb_BrowseValue] &

        p_autoReleaseCP : BOOL
    THEN
        /* Note: we do not have access to the browse_treatment variables,
                 only operation result are forwarded by translate browse path machines */
        ResponseBrowse_BrowseStatus,
        ResponseBrowse_ContinuationPoint,
        ResponseBrowse_ResultReferences
        :(
            {p_bvi} <<| ResponseBrowse_BrowseStatus = {p_bvi} <<| ResponseBrowse_BrowseStatus$0 &
            {p_bvi} <<| ResponseBrowse_ResultReferences = {p_bvi} <<| ResponseBrowse_ResultReferences$0 &
            {p_bvi} <<| ResponseBrowse_ContinuationPoint = {p_bvi} <<| ResponseBrowse_ContinuationPoint$0 &

            ResponseBrowse_BrowseStatus(p_bvi) : t_StatusCode &
            ((ResponseBrowse_BrowseStatus(p_bvi) = e_sc_ok or
              ResponseBrowse_BrowseStatus(p_bvi) = e_sc_bad_no_continuation_points) =>
                p_bvi : dom(ResponseBrowse_ResultReferences) & // Result is defined
                p_bvi : dom(ResponseBrowse_ContinuationPoint) & // Continuation is either indet or defined
              (ResponseBrowse_BrowseStatus(p_bvi) = e_sc_bad_no_continuation_points =>
                 ResponseBrowse_ContinuationPoint(p_bvi) = c_ContinuationPointId_indet) &
              not (ResponseBrowse_BrowseStatus(p_bvi) = e_sc_ok or
                   ResponseBrowse_BrowseStatus(p_bvi) = e_sc_bad_no_continuation_points) =>
                p_bvi /: dom(ResponseBrowse_ResultReferences) &
                p_bvi /: dom(ResponseBrowse_ContinuationPoint)
            )
        )
    END
    ;

    treat_browse_next_request_BrowseContinuationPoint_1(p_session, p_req_msg, p_resp_msg, p_cpi) =
    PRE
        RequestBrowseNext_ReleaseContinuationPoints = FALSE &
        RequestBrowse_nb_BrowseValue > 0 &
        RequestBrowse_nb_BrowseValue <= k_n_BrowseResponse_max &

        p_session : t_session_i &
        p_req_msg : t_msg_i &
        p_req_msg : t_msg &
        p_req_msg = c_msg_in &
        a_msg_in_type = e_msg_view_browse_next_req &
        p_resp_msg : t_msg_i &
        p_resp_msg : t_msg &
        p_resp_msg = c_msg_out &
        a_msg_out_type = e_msg_view_browse_next_resp &

        p_cpi       : t_BrowseValue_i &
        p_cpi       : t_BrowseValue &
        p_cpi       : dom(RequestBrowseNext_ContinuationPointId)
    THEN
        /* Note: we do not have access to the browse_treatment variables,
                 only operation result are forwarded by translate browse path machines */
        ResponseBrowseNext_BrowseStatus,
        ResponseBrowseNext_ContinuationPoint,
        ResponseBrowseNext_ResultReferences
        :(
            {p_cpi} <<| ResponseBrowseNext_BrowseStatus = {p_cpi} <<| ResponseBrowseNext_BrowseStatus$0 &
            {p_cpi} <<| ResponseBrowseNext_ResultReferences = {p_cpi} <<| ResponseBrowseNext_ResultReferences$0 &
            {p_cpi} <<| ResponseBrowseNext_ContinuationPoint = {p_cpi} <<| ResponseBrowseNext_ContinuationPoint$0 &

            ResponseBrowseNext_BrowseStatus(p_cpi) : t_StatusCode &
            (ResponseBrowseNext_BrowseStatus(p_cpi) = e_sc_ok =>
                p_cpi : dom(ResponseBrowseNext_ResultReferences) & // Result is defined
                p_cpi : dom(ResponseBrowseNext_ContinuationPoint) // Continuation is either indet or defined
            ) &
            (ResponseBrowseNext_BrowseStatus(p_cpi) /= e_sc_ok =>
                p_cpi /: dom(ResponseBrowseNext_ResultReferences) &
                p_cpi /: dom(ResponseBrowseNext_ContinuationPoint)
            )
        )
    END
    ;

    treat_browse_next_request_ReleaseContinuationPoint_1(p_session, p_req_msg, p_resp_msg, p_cpi) =
    PRE
        RequestBrowseNext_ReleaseContinuationPoints = TRUE &

        p_session : t_session_i &
        p_req_msg : t_msg_i &
        p_req_msg : t_msg &
        p_req_msg = c_msg_in &
        a_msg_in_type = e_msg_view_browse_next_req &
        p_resp_msg : t_msg_i &
        p_resp_msg : t_msg &
        p_resp_msg = c_msg_out &
        a_msg_out_type = e_msg_view_browse_next_resp &

        p_cpi       : t_BrowseValue_i &
        p_cpi       : t_BrowseValue &
        p_cpi       : dom(RequestBrowseNext_ContinuationPointId)
    THEN
        /* Note: we do not have access to the browse_treatment variables,
                 only operation result are forwarded by translate browse path machines */
        ResponseBrowseNext_BrowseStatus
        :(
            {p_cpi} <<| ResponseBrowseNext_BrowseStatus = {p_cpi} <<| ResponseBrowseNext_BrowseStatus$0 &
            ResponseBrowseNext_BrowseStatus(p_cpi) : {e_sc_ok, e_sc_bad_continuation_point_invalid}
        )
    END
    ;

    StatusCode_service <-- treat_browse_next_request_BrowseContinuationPoints(p_session, p_req_msg, p_resp_msg, p_releaseCP, p_nbCP) =
    PRE
        p_session : t_session_i &
        p_req_msg : t_msg_i &
        p_req_msg : t_msg &
        p_req_msg = c_msg_in &
        a_msg_in_type = e_msg_view_browse_next_req &
        p_resp_msg : t_msg_i &
        p_resp_msg : t_msg &
        p_resp_msg = c_msg_out &
        a_msg_out_type = e_msg_view_browse_next_resp &

        p_releaseCP : BOOL &
        p_releaseCP = RequestBrowseNext_ReleaseContinuationPoints &
        p_nbCP      : NAT &
        p_nbCP      = card(RequestBrowseNext_ContinuationPointId)
    THEN
        StatusCode_service,
        ResponseBrowseNext_BrowseStatus,
        ResponseBrowseNext_ContinuationPoint,
        ResponseBrowseNext_ResultReferences,
        isBrowseNextResponseAllocated
        :(
            ResponseBrowseNext_BrowseStatus        : t_BrowseValue +-> t_StatusCode        &
            ResponseBrowseNext_ContinuationPoint   : t_BrowseValue +-> t_ContinuationPointId_i &
            ResponseBrowseNext_ResultReferences    : t_BrowseValue +-> t_BrowseResultReferences &
            isBrowseNextResponseAllocated : BOOL &

            StatusCode_service : {e_sc_ok, e_sc_bad_out_of_memory, e_sc_bad_nothing_to_do, e_sc_bad_too_many_ops} &

            (StatusCode_service = e_sc_ok =>
                isBrowseNextResponseAllocated = TRUE &
                ResponseBrowseNext_BrowseStatus : cast_t_BrowseValue[1..p_nbCP] --> t_StatusCode &
                (p_releaseCP = FALSE =>
                    !p_index.(p_index : cast_t_BrowseValue[1..p_nbCP] & ResponseBrowseNext_BrowseStatus(p_index) = e_sc_ok =>
                                p_index : dom(ResponseBrowseNext_ContinuationPoint) &
                                p_index : dom(ResponseBrowseNext_ResultReferences)
                    ) &
                    !p_index.(p_index : cast_t_BrowseValue[1..p_nbCP] & ResponseBrowseNext_BrowseStatus(p_index) /= e_sc_ok =>
                                p_index /: dom(ResponseBrowseNext_ContinuationPoint) &
                                p_index /: dom(ResponseBrowseNext_ResultReferences)
                    )
                )
            ) &
            (StatusCode_service /= e_sc_ok => isBrowseNextResponseAllocated = FALSE)
        )
    END

OPERATIONS

    /* Computes the part of the response to a browse request message on one given source node.
       Computes the maximum number of target nodes, allocate the memory to store them and fill
       the requested data.
       p_session       : the session used to treat the browse request
       p_req_msg       : the browse request message
       p_resp_msg      : the browse response message
       p_nid_view      : the browse request view node id
       p_nb_target_max : limit number of target nodes in the browse response requested by the client (0 means no limit)
       p_bvi           : browse value index of the starting node
       p_autoReleaseCP : release the previous continuation point if a new one is required
    */
    treat_browse_request_BrowseValue_1(p_session, p_req_msg, p_resp_msg, p_nid_view, p_nb_target_max, p_bvi, p_autoReleaseCP) =
    VAR
        l_SrcNodeId,
        l_dir,
        l_reftype,
        l_incsubtyp,
        l_serviceStatusCode,
        l_continuationPointId,
        l_nbTargets,
        l_browseResult,
        l_nodeClassMask,
        l_resultMask
    IN
        l_SrcNodeId, l_dir, l_reftype, l_incsubtyp, l_nodeClassMask, l_resultMask
          <-- getall_BrowseValue(p_req_msg, p_bvi);
        IF l_dir /= e_bd_indet THEN
            IF  l_SrcNodeId /= c_NodeId_indet THEN
                l_serviceStatusCode <-- set_browse_value_context(p_session, p_nb_target_max, p_nid_view,
                                                                 l_SrcNodeId, l_dir, l_reftype, l_incsubtyp,
                                                                 l_nodeClassMask, l_resultMask, p_autoReleaseCP);
                IF l_serviceStatusCode = e_sc_ok THEN
                    l_serviceStatusCode, l_continuationPointId, l_nbTargets <-- compute_browse_result;
                    clear_browse_value_context;
                    IF l_serviceStatusCode = e_sc_ok or l_serviceStatusCode = e_sc_bad_no_continuation_points THEN
                        l_nbTargets, l_browseResult <-- getall_and_move_browse_result;
                        set_ResponseBrowse_BrowseResult(p_resp_msg, p_bvi, l_nbTargets, l_browseResult);
                        // Continuation is either indet or defined
                        set_ResponseBrowse_ContinuationPoint(p_resp_msg, p_bvi, l_continuationPointId)
                    END
                END;
                set_ResponseBrowse_BrowseStatus(p_resp_msg, p_bvi, l_serviceStatusCode)
            ELSE
                set_ResponseBrowse_BrowseStatus(p_resp_msg, p_bvi, e_sc_bad_node_id_invalid)
            END
        ELSE
            set_ResponseBrowse_BrowseStatus(p_resp_msg, p_bvi, e_sc_bad_browse_direction_invalid)
        END
    END
    ;

    /* Computes a browse request message by looping on each source node found in the browse request. */
    StatusCode_service <-- treat_browse_request_BrowseValues (p_session, p_req_msg, p_resp_msg, p_nid_view, p_nb_target_max, p_nb_browse_value) =
    VAR
        l_continue,
        l_bvi,
        l_first_iteration,
        l_isallocated
    IN
        /* When view is not c_NodeId_indet, we fail, because we don't support Views at all. */
        IF p_nid_view = c_NodeId_indet THEN
            IF p_nb_browse_value > 0 & p_nb_browse_value <= k_n_BrowseResponse_max THEN
                l_isallocated <-- alloc_browse_response(p_resp_msg, p_nb_browse_value);
                IF l_isallocated = TRUE THEN
                    StatusCode_service := e_sc_ok;
                    l_continue <-- init_iter_browse_request(p_nb_browse_value);
                    l_first_iteration := TRUE;
                    WHILE l_continue = TRUE DO
                        l_continue, l_bvi <-- continue_iter_browse_request;
                        treat_browse_request_BrowseValue_1(p_session,  p_req_msg, p_resp_msg, p_nid_view, p_nb_target_max, l_bvi, l_first_iteration);
                        l_first_iteration := FALSE
                    INVARIANT
                        breqs_to_iterate /\ breqs_iterated = {} &
                        breqs_nb_reqs = card(breqs_to_iterate \/ breqs_iterated) &

                        ResponseBrowse_BrowseStatus : breqs_iterated --> t_StatusCode &
                        /* Continuation points and result references are defined when status is OK or there is no available continuation points:
                           - Continuation point could be indet
                           - Result references count could be 0
                        */
                        !p_index.(p_index : breqs_iterated &
                                   (ResponseBrowse_BrowseStatus(p_index) = e_sc_ok or
                                    ResponseBrowse_BrowseStatus(p_index) = e_sc_bad_no_continuation_points) =>
                                     p_index : dom(ResponseBrowse_ContinuationPoint) &
                                     p_index : dom(ResponseBrowse_ResultReferences) &
                                    (ResponseBrowse_BrowseStatus(p_index) = e_sc_bad_no_continuation_points =>
                                      ResponseBrowse_ContinuationPoint(p_index) = c_ContinuationPointId_indet)
                         )
                    VARIANT
                        card(breqs_to_iterate)
                    END
                ELSE
                    StatusCode_service := e_sc_bad_out_of_memory
                END
            ELSE
                IF p_nb_browse_value = 0 THEN
                    StatusCode_service := e_sc_bad_nothing_to_do
                ELSE
                    StatusCode_service := e_sc_bad_too_many_ops
                END
            END
        ELSE
            StatusCode_service := e_sc_bad_view_id_unknown
        END
    END
    ;

    treat_browse_next_request_BrowseContinuationPoint_1(p_session, p_req_msg, p_resp_msg, p_cpi) =
    VAR
        l_continuationPointId,
        l_statusCode,
        l_nbTargets,
        l_browseResult
    IN
        l_continuationPointId <-- getall_ContinuationPoint (p_req_msg, p_cpi);
        l_statusCode <-- set_browse_value_context_from_continuation_point (p_session, l_continuationPointId);
        IF l_statusCode = e_sc_ok THEN
            l_statusCode, l_continuationPointId, l_nbTargets <-- compute_browse_result;
            clear_browse_value_context;
            ASSERT(l_statusCode /= e_sc_bad_no_continuation_points) THEN
                /* Since the precedent continuation point has been released, there is always a continuation point here */
                IF l_statusCode = e_sc_ok or l_statusCode = e_sc_bad_no_continuation_points THEN
                    l_nbTargets, l_browseResult <-- getall_and_move_browse_result;
                    set_ResponseBrowseNext_BrowseResult(p_resp_msg, p_cpi, l_nbTargets, l_browseResult);
                    // Continuation is either indet or defined
                    set_ResponseBrowseNext_ContinuationPoint(p_resp_msg, p_cpi, l_continuationPointId)
                END
            END
        END
        ;
        set_ResponseBrowseNext_BrowseStatus(p_resp_msg, p_cpi, l_statusCode)
    END
    ;

    treat_browse_next_request_ReleaseContinuationPoint_1(p_session, p_req_msg, p_resp_msg, p_cpi) =
    VAR
        l_continuationPointId,
        l_bres
    IN
        l_continuationPointId <-- getall_ContinuationPoint (p_req_msg, p_cpi);
        l_bres <-- release_continuation_point (p_session, l_continuationPointId);
        IF l_bres = TRUE THEN
            set_ResponseBrowseNext_BrowseStatus(p_resp_msg, p_cpi, e_sc_ok)
        ELSE
            set_ResponseBrowseNext_BrowseStatus(p_resp_msg, p_cpi, e_sc_bad_continuation_point_invalid)
        END
    END
    ;

    StatusCode_service <-- treat_browse_next_request_BrowseContinuationPoints(p_session, p_req_msg, p_resp_msg, p_releaseCP, p_nbCP) =
    VAR
        l_isallocated,
        l_continue,
        l_cpi
    IN
        IF p_nbCP > 0 & p_nbCP <= k_n_BrowseResponse_max THEN
            l_isallocated <-- alloc_browse_next_response(p_resp_msg, p_nbCP);
            IF l_isallocated = TRUE THEN
                StatusCode_service := e_sc_ok;
                l_continue <-- init_iter_browse_request(p_nbCP);
                WHILE l_continue = TRUE DO
                    l_continue, l_cpi <-- continue_iter_browse_request;
                    IF p_releaseCP = FALSE THEN
                        treat_browse_next_request_BrowseContinuationPoint_1(p_session, p_req_msg, p_resp_msg, l_cpi)
                    ELSE
                        treat_browse_next_request_ReleaseContinuationPoint_1(p_session, p_req_msg, p_resp_msg, l_cpi)
                    END
                INVARIANT
                    breqs_to_iterate /\ breqs_iterated = {} &
                    breqs_to_iterate \/ breqs_iterated = cast_t_BrowseValue[1..p_nbCP] &
                    l_continue = bool(breqs_to_iterate /= {}) &

                    ResponseBrowseNext_BrowseStatus : breqs_iterated --> t_StatusCode &
                    /* Continuation points and result references are defined when status is OK or there is no available continuation points:
                    - Continuation point could be indet
                    - Result references count could be 0
                    */
                    !p_index.(p_index : breqs_iterated & p_releaseCP = FALSE &
                        (ResponseBrowseNext_BrowseStatus(p_index) = e_sc_ok) =>
                        p_index : dom(ResponseBrowseNext_ContinuationPoint) &
                        p_index : dom(ResponseBrowseNext_ResultReferences)
                    )
                VARIANT
                    card(breqs_to_iterate)
                END
            ELSE
                StatusCode_service := e_sc_bad_out_of_memory
            END
        ELSE
            IF p_nbCP = 0 THEN
                StatusCode_service := e_sc_bad_nothing_to_do
            ELSE
                StatusCode_service := e_sc_bad_too_many_ops
            END
        END
    END
    ;

    /* END OF LOCAL_OPERATIONS */

    StatusCode_service <-- treat_browse_request (p_session, p_req_msg, p_resp_msg) =
    VAR
        l_nid_view,
        l_nb_BrowseTargetMax,
        l_nb_BrowseValues
    IN
        l_nid_view, l_nb_BrowseTargetMax, l_nb_BrowseValues <-- get_browse_request_params(p_req_msg);
        StatusCode_service <-- treat_browse_request_BrowseValues (p_session, p_req_msg, p_resp_msg, l_nid_view, l_nb_BrowseTargetMax, l_nb_BrowseValues)
    END
    ;

    StatusCode_service <-- treat_browse_next_request (p_session, p_req_msg, p_resp_msg) =
    VAR
        l_releaseContinuationPoints,
        l_nb_ContinuationPoints
    IN
        l_releaseContinuationPoints, l_nb_ContinuationPoints <-- get_browse_next_request_params(p_req_msg);
        StatusCode_service <-- treat_browse_next_request_BrowseContinuationPoints
                                 (p_session, p_req_msg, p_resp_msg, l_releaseContinuationPoints, l_nb_ContinuationPoints)
    END
    ;

    service_set_view_set_session_closed(p_session) =
    BEGIN
        set_session_closed(p_session)
    END
    ;

    /* Address space modification => clear all continuation points */
    service_set_view_service_node_management_used =
    BEGIN
        continuation_points_UNINITIALISATION
    END
    ;

    service_set_view_UNINITIALISATION =
    BEGIN
        continuation_points_UNINITIALISATION
    END
    ;

    StatusCode_service <-- treat_translate_browse_paths_request (p_req_msg, p_resp_msg) =
    VAR
        l_continue,
        l_browsePath
    IN
        StatusCode_service <-- init_translate_browse_paths_request(p_req_msg);
        IF StatusCode_service = e_sc_ok THEN
            l_continue <-- init_iter_browsePaths;
            WHILE l_continue = TRUE
            DO
                l_continue, l_browsePath <-- continue_iter_browsePath;
                treat_one_translate_browse_path(l_browsePath)
            INVARIANT
                browsePaths_to_iterate <: t_BrowsePath &
                browsePaths_iterated   <: t_BrowsePath &
                browsePaths_to_iterate /\ browsePaths_iterated = {} &
                l_continue = bool(browsePaths_to_iterate /= {})
            VARIANT
                card(browsePaths_iterated)
            END
        END
        ;
        write_translate_browse_paths_response(p_resp_msg)
    END

END
