/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    service_write_i

REFINES
    service_write

SEES
    constants,
    constants_statuscodes_bs,
    message_in_bs,
    message_out_bs

IMPORTS
    service_write_1,
    service_write_decode_bs

/* Note: We would like to use EXTENDS instead of IMPORTS + PROMOTES,
   but it would trigger a bug in the project check. */

PROMOTES
    is_mandatory_attribute,
    read_Node_Attribute,
    readall_AddressSpace_Node,
    get_NodeClass,
    get_BrowseName,
    get_DisplayName,
    is_transitive_subtype,
    is_valid_ReferenceTypeId,
    is_NodeId_equal,
    get_TypeDefinition,
    get_Reference_ReferenceType,
    get_Reference_TargetNode,
    get_Reference_IsForward,
    get_Node_RefIndexEnd,
    get_RefIndex_Reference,
    get_Value_StatusCode,
    read_AddressSpace_clear_value,
    read_AddressSpace_free_variant,
    is_local_service_treatment,
    set_local_service_treatment,
    get_user_authorization ,
    get_Executable,
    get_InputArguments,
    get_conv_Variant_ValueRank,
    get_conv_Variant_Type,
    read_variable_compat_type,
    check_object_has_method,
    check_nodeId_isValid,
    is_IndexRangeDefined

OPERATIONS

    StatusCode_service <-- treat_write_request(p_user, p_locales, write_msg, resp_msg) =
    VAR
        l_nb_req,
        l_bret
    IN
        StatusCode_service <-- decode_write_request(write_msg);
        IF StatusCode_service = e_sc_ok
        THEN
            l_nb_req <-- get_nb_WriteValue;
            l_bret <-- alloc_write_request_responses(l_nb_req);
            IF l_bret = TRUE
            THEN
                StatusCode_service <-- treat_write_request_WriteValues(p_user, p_locales)
            ELSE
                StatusCode_service := e_sc_bad_out_of_memory
            END
        END;
        free_write_request;
        /* TODO: the following may fail (malloc) */
        write_WriteResponse_msg_out(resp_msg);
        dealloc_write_request_responses
    END

END
