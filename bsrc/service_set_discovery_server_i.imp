/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
   service_set_discovery_server_i
REFINES
   service_set_discovery_server
IMPORTS
    msg_register_server2,
    service_register_server2,
    service_set_discovery_server_data_bs,
    msg_find_servers_on_network_bs,
    msg_find_servers_bs
SEES
   constants,
   constants_statuscodes_bs,
   message_in_bs,
   message_out_bs

DEFINITIONS

    /* a_RegisteredServer2_mDNSconfig restricted to the mDNSconfig compatible with the FindServersOnNetwork request */
    a_FindServersOnNetworkCompat_mDNSconfig ==
      (a_RegisteredServer2_mDNSconfig |> dom(MdnsDiscoveryConfig_HasServerCapabilities |> {FindServersOnNetworkReq_ServerCapabilities}));

    /* a_RegisteredServer2_RecordId restricted to the mDNSconfig and recordIds compatible with the FindServersOnNetwork request */
    a_FindServersOnNetworkCompat_RecordId ==
      (dom(a_FindServersOnNetworkCompat_mDNSconfig) <| a_RegisteredServer2_RecordId |> FindServersOnNetworkReq_StartingRecordId..MAXINT);

    /* a_RegisteredServer2_RegisteredServer restricted to the ServerURI compatible with the FindServers request */
    a_FindServersCompat_RegisteredServer ==
      (a_RegisteredServer2_RegisteredServer |> dom(RegisteredServer_ServerUri |> ServerUriArray_HasServerUri[{FindServersReq_ServerUris}]))

LOCAL_OPERATIONS

    p_nb_servers <-- local_get_nb_servers_on_network_to_return (p_starting_record_id, p_max_records_to_return, p_serverCapabilities) =
    PRE
        p_starting_record_id : NAT &
        p_starting_record_id = FindServersOnNetworkReq_StartingRecordId &
        p_max_records_to_return : NAT &
        p_max_records_to_return = FindServersOnNetworkReq_MaxRecordsToReturn &
        p_serverCapabilities : t_ServerCapabilities &
        p_serverCapabilities = FindServersOnNetworkReq_ServerCapabilities
    THEN
        IF p_max_records_to_return = 0
        THEN
            p_nb_servers := card(a_FindServersOnNetworkCompat_RecordId)
        ELSE
            p_nb_servers := min({FindServersOnNetworkReq_MaxRecordsToReturn,
                                 card(a_FindServersOnNetworkCompat_RecordId)})
        END
    END
    ;

    local_set_servers_on_network_to_return (p_resp, p_starting_record_id, p_serverCapabilities, p_nb_servers) =
    PRE
        p_resp : t_msg_i &
        p_resp = FindServersOnNetworkResp &
        p_starting_record_id : NAT &
        p_starting_record_id = FindServersOnNetworkReq_StartingRecordId &
        p_serverCapabilities : t_ServerCapabilities &
        p_serverCapabilities = FindServersOnNetworkReq_ServerCapabilities &
        p_nb_servers : NAT &
        p_nb_servers = FindServersOnNetworkResp_NbServers &
        p_nb_servers > 0 &
        p_nb_servers = min({FindServersOnNetworkReq_MaxRecordsToReturn,
                           card(a_FindServersOnNetworkCompat_RecordId)})
    THEN
        FindServersOnNetworkResp_ServerRecordId,
        FindServersOnNetworkResp_ServerRegisteredConfig,
        FindServersOnNetworkResp_ServerMdnsConfig
        :(
            FindServersOnNetworkResp_ServerRecordId : seq(NAT) &
            FindServersOnNetworkResp_ServerRegisteredConfig : seq(t_RegisteredServer) &
            FindServersOnNetworkResp_ServerMdnsConfig : seq(t_MdnsDiscoveryConfig) &

            ran(FindServersOnNetworkResp_ServerRecordId) <: ran(a_FindServersOnNetworkCompat_RecordId) &
            /* In case we do not use all compatible records we shall return the first compatible recordIds in numerical order */
            (ran(FindServersOnNetworkResp_ServerRecordId) /= ran(a_FindServersOnNetworkCompat_RecordId) =>
                max(ran(FindServersOnNetworkResp_ServerRecordId))
                < min(ran(a_FindServersOnNetworkCompat_RecordId) - ran(FindServersOnNetworkResp_ServerRecordId))) &
            /* We set the config associated to each recordId returned */
            !p_index.(p_index : 0 .. p_nb_servers - 1 =>
                /* Numercial order compliant */
                (p_index > 0 =>
                  FindServersOnNetworkResp_ServerRecordId(p_index) > max(FindServersOnNetworkResp_ServerRecordId[0..p_index-1])) &
                /* For a given index we have the configuration associated to the recordId */
                FindServersOnNetworkResp_ServerRegisteredConfig(p_index) =
                 a_RegisteredServer2_RegisteredServer(a_RegisteredServer2_RecordId~(FindServersOnNetworkResp_ServerRecordId(p_index))) &
                FindServersOnNetworkResp_ServerMdnsConfig(p_index) =
                 a_RegisteredServer2_mDNSconfig(a_RegisteredServer2_RecordId~(FindServersOnNetworkResp_ServerRecordId(p_index)))
            )
        )
    END
    ;

    p_nb_servers <-- local_get_nb_servers_to_return (p_nbServerUri, p_ServerUris) =
    PRE
        p_nbServerUri : NAT &
        p_nbServerUri = FindServersReq_NbServerUri &
        p_ServerUris : t_ServerUris &
        p_ServerUris = FindServersReq_ServerUris
    THEN
        IF p_nbServerUri <= 0
        THEN
            p_nb_servers := card(s_RegisteredServer2)
        ELSE
            p_nb_servers := card(a_FindServersCompat_RegisteredServer)
        END
    END
    ;

    p_compatSelf, p_appDesc, p_nbServersOut
      <-- local_add_self_server_to_return (p_endpoint_config_idx, p_nbServerUri, p_ServerUris, p_nbServersIn) =
    PRE
        p_endpoint_config_idx : t_endpoint_config_idx_i &
        p_endpoint_config_idx : t_endpoint_config_idx &
        p_nbServerUri : NAT &
        p_nbServerUri = FindServersReq_NbServerUri &
        p_ServerUris : t_ServerUris &
        p_ServerUris = FindServersReq_ServerUris &
        p_nbServersIn : NAT
    THEN
        p_compatSelf,
        p_appDesc,
        p_nbServersOut
        :(p_compatSelf : BOOL &
          p_appDesc : t_ApplicationDescription_i &
          p_nbServersOut : NAT &
            (p_compatSelf = TRUE =>
                p_nbServersOut = p_nbServersIn + 1 &
                p_appDesc : t_ApplicationDescription) &
            (p_compatSelf = FALSE =>
                p_nbServersOut = p_nbServersIn)
          )
    END
    ;

    ret <-- local_set_servers_to_return (p_resp, p_localeIds, p_nbServerUri, p_ServerUris, p_nb_servers) =
    PRE
        p_resp : t_msg_i &
        p_resp = FindServersResp &
        p_localeIds : t_LocaleIds_i &
        p_localeIds : t_LocaleIds &
        p_localeIds = FindServersReq_LocaleIds &
        p_nbServerUri : NAT &
        p_nbServerUri = FindServersReq_NbServerUri &
        p_ServerUris : t_ServerUris &
        p_ServerUris = FindServersReq_ServerUris &
        p_nb_servers : NAT &
        p_nb_servers > 0 &
        p_nb_servers = FindServersResp_NbServers - 1 & // current endpoint server added
        (p_nbServerUri > 0 => p_nb_servers = card(a_FindServersCompat_RegisteredServer)) &
        (p_nbServerUri = 0 => p_nb_servers = card(s_RegisteredServer2))
    THEN
        ret,
        FindServersResp_ApplicationDescription
        :(
            ret : {e_sc_ok, e_sc_bad_out_of_memory} &
            FindServersResp_ApplicationDescription : seq(t_ApplicationDescription) &
            (ret = e_sc_ok =>
                /* No filter: all RegisteredServer config are returned */
                (p_nbServerUri <= 0 =>
                    ran(FindServersResp_ApplicationDescription)
                    = ran(a_RegisteredServer2_RegisteredServer;FindServers_RegisteredServerToApplicationDesc)) &
                /* No filter: all RegisteredServer config compatible with ServerUri array provided in FindServers request */
                (p_nbServerUri > 0 =>
                    ran(FindServersResp_ApplicationDescription)
                    = ran(a_FindServersCompat_RegisteredServer;FindServers_RegisteredServerToApplicationDesc)))
        )
    END

OPERATIONS
    /* LOCAL OPERATIONS */
    p_nb_servers <-- local_get_nb_servers_on_network_to_return (p_starting_record_id, p_max_records_to_return, p_serverCapabilities) =
    VAR
        l_continue,
        l_registeredServerInfo,
        l_recordId,
        l_mdnsConfig,
        l_compatServerCapabilities
    IN
        p_nb_servers := 0;
        l_continue <-- init_iter_registered_server2_set;
        WHILE l_continue = TRUE & (p_max_records_to_return = 0 or p_nb_servers < p_max_records_to_return) DO
            l_continue, l_registeredServerInfo <-- continue_iter_registered_server2_set;
            l_recordId <-- get_registered_server2_recordId (l_registeredServerInfo);
            IF l_recordId >= p_starting_record_id
            THEN
                l_mdnsConfig <-- get_registered_server2_mdns_config (l_registeredServerInfo);
                l_compatServerCapabilities <-- has_ServerCapabilities (l_mdnsConfig, p_serverCapabilities);
                IF l_compatServerCapabilities = TRUE
                THEN
                    p_nb_servers := p_nb_servers + 1
                END
            END
        INVARIANT
            l_continue = bool(s_registered_server2_to_iterate_it /= {}) &
            p_nb_servers = card(s_registered_server2_iterated_it <| a_FindServersOnNetworkCompat_RecordId) &
            (p_max_records_to_return = 0 or p_nb_servers <= p_max_records_to_return)
        VARIANT
            card(s_registered_server2_to_iterate_it)
        END
        ;
        clear_iter_registered_server2_set
        // Note: it is responsibility of caller to check if it remains 0 servers
    END
    ;

    local_set_servers_on_network_to_return (p_resp, p_starting_record_id, p_serverCapabilities, p_nb_servers) =
    VAR
        l_continue,
        l_nb_servers,
        l_registeredServerInfo,
        l_recordId,
        l_registeredServer,
        l_mdnsConfig,
        l_compatServerCapabilities
    IN
        l_nb_servers := 0;
        l_continue <-- init_iter_registered_server2_set;
        WHILE l_continue = TRUE & l_nb_servers < p_nb_servers DO
            l_continue, l_registeredServerInfo <-- continue_iter_registered_server2_set;
            l_recordId <-- get_registered_server2_recordId (l_registeredServerInfo);
            IF l_recordId >= p_starting_record_id
            THEN
                l_registeredServer <-- get_registered_server2_registered_server (l_registeredServerInfo);
                l_mdnsConfig <-- get_registered_server2_mdns_config (l_registeredServerInfo);
                l_compatServerCapabilities <-- has_ServerCapabilities (l_mdnsConfig, p_serverCapabilities);
                IF l_compatServerCapabilities = TRUE
                THEN
                    set_find_servers_on_network_server (p_resp, l_nb_servers, l_recordId, l_registeredServer, l_mdnsConfig);
                    l_nb_servers := l_nb_servers + 1
                END
            END
        INVARIANT
            l_continue = bool(s_registered_server2_to_iterate_it /= {}) &
            l_nb_servers = card(s_registered_server2_iterated_it <| a_FindServersOnNetworkCompat_RecordId) &
            l_nb_servers <= p_nb_servers &


            /* Response contains all compatible recordId iterated */
            ran(FindServersOnNetworkResp_ServerRecordId) = ran(s_registered_server2_iterated_it <| a_FindServersOnNetworkCompat_RecordId) &

            /* Iterated recordId values shall be the first compatible recordIds in numerical order */
            (ran(s_registered_server2_iterated_it <| a_FindServersOnNetworkCompat_RecordId) /= {} &
             ran(s_registered_server2_to_iterate_it <| a_FindServersOnNetworkCompat_RecordId) /= {} =>
                max(ran(s_registered_server2_iterated_it <| a_FindServersOnNetworkCompat_RecordId))
                < min(ran(s_registered_server2_to_iterate_it <| a_FindServersOnNetworkCompat_RecordId))) &

            /* We set the config associated to each recordId returned */
            !p_index.(p_index : 0 .. l_nb_servers - 1 =>
                FindServersOnNetworkResp_ServerRecordId(p_index) : a_RegisteredServer2_RecordId[s_registered_server2_iterated_it] &
                /* Numercial order compliant */
                (p_index > 0 =>
                  FindServersOnNetworkResp_ServerRecordId(p_index) > max(FindServersOnNetworkResp_ServerRecordId[0..p_index-1])) &
                /* For a given index we have the configuration associated to the recordId */
                FindServersOnNetworkResp_ServerRegisteredConfig(p_index) =
                 a_RegisteredServer2_RegisteredServer(a_RegisteredServer2_RecordId~(FindServersOnNetworkResp_ServerRecordId(p_index))) &
                FindServersOnNetworkResp_ServerMdnsConfig(p_index) =
                 a_RegisteredServer2_mDNSconfig(a_RegisteredServer2_RecordId~(FindServersOnNetworkResp_ServerRecordId(p_index)))
            )
        VARIANT
            card(s_registered_server2_to_iterate_it)
        END
        ;
        clear_iter_registered_server2_set
    END
    ;

    p_nb_servers <-- local_get_nb_servers_to_return (p_nbServerUri, p_ServerUris) =
    VAR
        l_continue,
        l_registeredServerInfo,
        l_registeredServer,
        l_serverUri,
        l_compatServerUri
    IN
        IF p_nbServerUri <= 0
        THEN
            p_nb_servers <-- get_card_register2_set
        ELSE
            p_nb_servers := 0;
            l_continue <-- init_iter_registered_server2_set;
            WHILE l_continue = TRUE DO
                l_continue, l_registeredServerInfo <-- continue_iter_registered_server2_set;
                l_registeredServer <-- get_registered_server2_registered_server (l_registeredServerInfo);
                l_serverUri <-- get_RegisteredServer_ServerUri (l_registeredServer);
                l_compatServerUri <-- has_ServerUri (l_serverUri, p_nbServerUri, p_ServerUris);
                IF l_compatServerUri = TRUE
                THEN
                    p_nb_servers := p_nb_servers + 1
                END
            INVARIANT
                l_continue = bool(s_registered_server2_to_iterate_it /= {}) &
                p_nb_servers = card(s_registered_server2_iterated_it <| a_FindServersCompat_RegisteredServer)
            VARIANT
                card(s_registered_server2_to_iterate_it)
            END
            ;
            clear_iter_registered_server2_set
        END
    END
    ;

    p_compatSelf, p_appDesc, p_nbServersOut
      <-- local_add_self_server_to_return (p_endpoint_config_idx, p_nbServerUri, p_ServerUris, p_nbServersIn) =
    VAR
        l_serverUri
    IN
        p_nbServersOut := p_nbServersIn;
        p_compatSelf := FALSE;
        p_appDesc <-- get_ApplicationDescription (p_endpoint_config_idx);
        l_serverUri <-- get_ApplicationDescription_ServerUri (p_appDesc);
        IF p_nbServerUri > 0
        THEN
            p_compatSelf <-- has_ServerUri (l_serverUri, p_nbServerUri, p_ServerUris)
        ELSE
            p_compatSelf := TRUE
        END
        ;
        IF p_compatSelf = TRUE
        THEN
            p_nbServersOut := p_nbServersIn + 1
        END
    END
    ;

    ret <-- local_set_servers_to_return (p_resp, p_localeIds, p_nbServerUri, p_ServerUris, p_nb_servers) =
    VAR
        l_continue,
        l_nb_servers,
        l_registeredServerInfo,
        l_registeredServer,
        l_serverUri,
        l_compatServerUri
    IN
        ret := e_sc_ok;
        l_nb_servers := 0;
        l_continue <-- init_iter_registered_server2_set;
        WHILE ret = e_sc_ok & l_continue = TRUE & l_nb_servers < p_nb_servers DO
            l_continue, l_registeredServerInfo <-- continue_iter_registered_server2_set;
            l_registeredServer <-- get_registered_server2_registered_server (l_registeredServerInfo);
            IF p_nbServerUri > 0
            THEN
                l_serverUri <-- get_RegisteredServer_ServerUri (l_registeredServer);
                l_compatServerUri <-- has_ServerUri (l_serverUri, p_nbServerUri, p_ServerUris);
                IF l_compatServerUri = TRUE
                THEN
                    ret <-- set_find_servers_server (p_resp, l_nb_servers, p_localeIds, l_registeredServer);
                    l_nb_servers := l_nb_servers + 1
                END
            ELSE
                ret <-- set_find_servers_server (p_resp, l_nb_servers, p_localeIds, l_registeredServer);
                l_nb_servers := l_nb_servers + 1
            END
        INVARIANT
            l_continue = bool(s_registered_server2_to_iterate_it /= {}) &
            l_nb_servers <= p_nb_servers &
            (ret = e_sc_ok =>
                (p_nbServerUri <= 0 => /* No filter: all RegisteredServer config are returned */
                    ran(FindServersResp_ApplicationDescription)
                     = ran(s_registered_server2_iterated_it <| a_RegisteredServer2_RegisteredServer;FindServers_RegisteredServerToApplicationDesc) &
                    l_nb_servers = card(s_registered_server2_iterated_it)) &
                (p_nbServerUri > 0 => /* No filter: all RegisteredServer config compatible with ServerUri array provided in FindServers request */
                    ran(FindServersResp_ApplicationDescription)
                     = ran(s_registered_server2_iterated_it <| a_FindServersCompat_RegisteredServer;FindServers_RegisteredServerToApplicationDesc) &
                    l_nb_servers = card(s_registered_server2_iterated_it <| a_FindServersCompat_RegisteredServer))
            )
        VARIANT
            card(s_registered_server2_to_iterate_it)
        END
        ;
        clear_iter_registered_server2_set
    END
    ;
    /* END OF LOCAL OPERATIONS */

    ret <-- treat_find_servers_on_network_request (req_msg, resp_msg) =
    VAR
        l_startingRecordId,
        l_maxRecordsToReturn,
        l_serverCapabilities,
        l_counter_reset_time,
        l_nb_servers,
        l_alloc_success
    IN
        ret := e_sc_ok;
        l_startingRecordId, l_maxRecordsToReturn, l_serverCapabilities <-- get_find_servers_on_network_req_params (req_msg);
        l_counter_reset_time <-- get_registered_server2_counter_reset_time;
        set_find_servers_on_network_resp (resp_msg, l_counter_reset_time);
        l_nb_servers <-- local_get_nb_servers_on_network_to_return (l_startingRecordId, l_maxRecordsToReturn, l_serverCapabilities);
        IF l_nb_servers > 0
        THEN
            l_alloc_success <-- alloc_find_servers_on_network_servers (resp_msg, l_nb_servers);
            IF l_alloc_success = TRUE
            THEN
                local_set_servers_on_network_to_return (resp_msg, l_startingRecordId, l_serverCapabilities, l_nb_servers)
            ELSE
                ret := e_sc_bad_out_of_memory
            END
        END /* ELSE: return no records */
    END
    ;

    ret <-- treat_register_server2_request (req_msg, resp_msg) =
    VAR
        l_is_online,
        l_nb_discovery_config,
        l_mdns_config_index,
        l_registered_server,
        l_mdns_config
    IN
        ret, l_is_online, l_nb_discovery_config, l_mdns_config_index, l_registered_server, l_mdns_config
          <-- check_register_server2_req (req_msg);
        IF ret = e_sc_ok THEN
            /* Note: if registered server already exists (same serverUri), remove it first to update. Otherwise no effect. */
            register_server2_remove (l_registered_server);
            IF l_is_online = TRUE
            THEN
                ret <-- register_server2_create (l_registered_server, l_mdns_config)
            END // ELSE: already removed
        END
        ;
        IF ret = e_sc_ok THEN
            ret <-- set_register_server2_resp_configuration_results (resp_msg, l_nb_discovery_config, l_mdns_config_index)
        END
    END
    ;

    ret <-- treat_find_servers_request (req_msg, resp_msg, endpoint_config_idx) =
    VAR
        l_LocaleIds,
        l_nbServerUri,
        l_ServerUris,
        l_nbServers,
        l_nbServersPlusSelf,
        l_appDesc,
        l_isCurrentCompat,
        l_allocSuccess
    IN
        ret := e_sc_ok;
        l_LocaleIds, l_nbServerUri, l_ServerUris <-- get_find_servers_req_params (req_msg);
        l_nbServers <-- local_get_nb_servers_to_return (l_nbServerUri, l_ServerUris);
        // Check if we add the current endpoint server information
        l_isCurrentCompat, l_appDesc, l_nbServersPlusSelf
          <-- local_add_self_server_to_return (endpoint_config_idx, l_nbServerUri, l_ServerUris, l_nbServers);

        IF l_nbServersPlusSelf > 0
        THEN
            l_allocSuccess <-- alloc_find_servers (resp_msg, l_nbServersPlusSelf);
            IF l_allocSuccess = TRUE
            THEN
                ret <-- local_set_servers_to_return (resp_msg, l_LocaleIds, l_nbServerUri, l_ServerUris, l_nbServers);
                IF ret = e_sc_ok & l_isCurrentCompat = TRUE
                THEN
                    ret <-- set_find_servers_server_ApplicationDescription (resp_msg, l_nbServersPlusSelf - 1, l_LocaleIds, endpoint_config_idx, l_appDesc)
                END
            ELSE
                ret := e_sc_bad_out_of_memory
            END
        END
        ;
        free_LocaleIds(l_LocaleIds)
    END
    ;

    service_set_discovery_server_UNINITIALISATION =
    BEGIN
        service_register_server2_UNINITIALISATION
    END

END
