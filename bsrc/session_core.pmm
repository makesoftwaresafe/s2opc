/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

THEORY User_Pass IS

ff(0) & dd(0) & ar(th_simp_overload) & ar(InPOWTryXY);
ff(0) & dd(0) & pr(Tac(LinkedRelations; InPOWTryXY));
ff(0) & dd(0) & ar(LinkedRelations) & mp & mp & eh(dom(a_channel)) & pr;
ff(0) & d0 & pr(Tac(th_simp_overload; InPOWLeavesXY));
ff(0) & dd(0) & ar(LinkedRelations) & mp & mp & eh(dom(a_user)) & pr;
ff(0) & mp & pp(rt.1);
ff(0) & dd & pp(rt.1)
END

&

THEORY LinkedRelations IS
    not(x : dom(s|>>L)) &
    blvar(Q) & Q \ (x,s,L)
    =>
    dom(s|>>L) - {x} == dom(s|>>L)
;
    binhyp(s(x) : Z) &
    Z /\ L = {} &
    blvar(Q) & Q \ (s,x,Z,L)
    =>
    dom(s|>>L) \/ {x} == dom(s|>>L)
;
    binhyp(s(x) = z) &
    not(z : L) &
    blvar(Q) & Q \ (s,x,z,L)
    =>
    dom(s|>>L) \/ {x} == dom(s|>>L)
;
    binhyp(s(x) = z) &
    z : L &
    blvar(Q) & Q \ (s,x,z,L)
    =>
    dom(s|>>L) - {x} == dom(s|>>L)
;
    binhyp(s(x) : Z) &
    Z /\ L = {} &
    blvar(Q) & Q \ (s,x,Z,L)
    =>
    dom(s|>L) - {x} == dom(s|>L)
;
    not(y : L) &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+(x*{y})|>>L) == dom(s|>>L) \/ x
;
    bsearch({y}, (L\/?), n) &
    y : L &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+(x*{y})|>>L) == dom(s|>>L) - x
;
    not(y : L) &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+{x|->y}|>>L) == dom(s|>>L) \/ {x}
;
    bsearch({y}, (L\/?), n) &
    y : L &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+{x|->y}|>>L) == dom(s|>>L) - {x}
;
    not(y : L) &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+(x*{y})|>L) == dom(s|>L) - x
;
    bsearch({y}, (L\/?), n) &
    y : L &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+(x*{y})|>L) == dom(s|>L) \/ x
;
    not(y : L) &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+{x|->y}|>L) == dom(s|>L) - {x}
;
    bsearch({y}, (L\/?), n) &
    y : L &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+{x|->y}|>L) == dom(s|>L) \/ {x}
END

&

THEORY th_simp_overload IS

    dom(r<+s) == dom(r)\/dom(s)
/*    ;
    a<+{b|->c}|>>{d,e} == */
    ;
    bnum(c) &
    bnum(e) &
    bnot(btest(c = e))
    =>
    a<+{b|->(c|->E)}|>{e|->E} == a|>{e|->E} <+ {b|->(c|->E)}

END

