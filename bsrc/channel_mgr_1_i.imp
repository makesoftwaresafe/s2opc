/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    channel_mgr_1_i

REFINES
    channel_mgr_1

SEES
    constants

CONCRETE_VARIABLES
    s_cli_channel_connecting_i,
    card_cli_channel_connecting_i,
    s_cli_channel_disconnecting_i,
    s_channel_connected_i,
    card_channel_connected_i,
    a_channel_connected_time_i,
    a_config_i,
    a_config_inv_i,
    a_endpoint_i

INVARIANT
    s_cli_channel_connecting_i    : t_channel_config_idx_i --> BOOL         &
    card_cli_channel_connecting_i : NAT                                     &
    s_cli_channel_disconnecting_i : t_channel_config_idx_i --> BOOL         &
    s_channel_connected_i         : t_channel_i            --> BOOL         &
    card_channel_connected_i      : NAT                                     &
    a_channel_connected_time_i    : t_channel_i --> t_timeref_i             &
    a_config_i                    : t_channel_i --> t_channel_config_idx_i  &
    a_config_inv_i                : t_channel_config_idx_i --> t_channel_i  &
    a_endpoint_i                  : t_channel_i --> t_endpoint_config_idx_i &

    s_cli_channel_connecting      = s_cli_channel_connecting_i~[{TRUE}] /\ t_channel_config_idx    &
    card_cli_channel_connecting_i = card(s_cli_channel_connecting)                                 &
    s_cli_channel_disconnecting   = s_cli_channel_disconnecting_i~[{TRUE}] /\ t_channel_config_idx &
    s_channel_connected           = s_channel_connected_i~[{TRUE}]                                 &
    card_channel_connected_i      = card(s_channel_connected)                                      &
    a_channel_connected_time      = s_channel_connected <| a_channel_connected_time_i |> t_timeref &
    a_config                      = t_channel            <| a_config_i     |> t_channel_config_idx &
    a_config~                     = t_channel_config_idx <| a_config_inv_i |> t_channel            &

    a_endpoint                    = t_channel            <| a_endpoint_i |> t_endpoint_config_idx

INITIALISATION
    s_cli_channel_connecting_i    := t_channel_config_idx_i * {FALSE};
    card_cli_channel_connecting_i := 0;
    s_cli_channel_disconnecting_i := t_channel_config_idx_i * {FALSE};
    s_channel_connected_i         := t_channel_i            * {FALSE};
    card_channel_connected_i      := 0;
    a_channel_connected_time_i    := t_channel_i            * {c_timeref_indet};
    a_config_i                    := t_channel_i            * {c_channel_config_idx_indet};
    a_config_inv_i                := t_channel_config_idx_i * {c_channel_indet};
    a_endpoint_i                  := t_channel_i            * {c_endpoint_config_idx_indet}

OPERATIONS

    bres <-- is_connected_channel(channel) =
    BEGIN
        bres := s_channel_connected_i(channel)
    END
    ;

    bres <-- is_disconnecting_channel(config_idx) =
    BEGIN
        bres := s_cli_channel_disconnecting_i(config_idx)
    END
    ;

    channel <-- get_connected_channel(config_idx) =
    VAR
        l_res
    IN
        channel := a_config_inv_i(config_idx);
        l_res <-- is_t_channel(channel);
        IF  l_res = FALSE THEN
            channel := c_channel_indet
        END
    END
    ;

    config_idx <-- get_channel_info(channel) =
    VAR
        l_res
    IN
        config_idx := a_config_i(channel);
        l_res <-- is_t_channel_config_idx(config_idx);
        IF  l_res = FALSE THEN
            config_idx := c_channel_config_idx_indet
        END
    END
    ;

    bres <-- is_client_channel(channel) =
    VAR
        l_endpoint,
        l_bres
    IN
        l_endpoint := a_endpoint_i(channel);
        l_bres <-- is_t_endpoint_config_idx(l_endpoint);
        IF l_bres = TRUE THEN
            bres := FALSE /* Endpoint config presence => server */
        ELSE
            bres := TRUE
        END
    END
    ;

    endpoint_config_idx <-- server_get_endpoint_config (channel) =
    VAR
        l_res
    IN
        endpoint_config_idx := a_endpoint_i(channel);
        l_res <-- is_t_endpoint_config_idx(endpoint_config_idx);
        IF  l_res = FALSE THEN
            endpoint_config_idx := c_endpoint_config_idx_indet
        END
    END
    ;

    p_dom, p_channel <-- getall_config_inv(p_config_idx) =
    BEGIN
        p_channel := a_config_inv_i(p_config_idx);
        p_dom <-- is_t_channel(p_channel);
        IF  p_dom = FALSE THEN
            p_channel := c_channel_indet
        END
    END
    ;

    p_card_connecting <-- get_card_cli_channel_connecting =
    BEGIN
        p_card_connecting := card_cli_channel_connecting_i
    END
    ;

    p_card_connected <-- get_card_channel_connected =
    BEGIN
        p_card_connected := card_channel_connected_i
    END
    ;

    p_card_used <-- get_card_channel_used =
    BEGIN
        p_card_used := card_cli_channel_connecting_i + card_channel_connected_i
    END
    ;

    add_cli_channel_connecting(p_config_idx) =
    VAR
        l_res
    IN
        l_res := s_cli_channel_connecting_i(p_config_idx);
        IF  l_res = FALSE THEN
            s_cli_channel_connecting_i(p_config_idx) := TRUE;
            card_cli_channel_connecting_i := card_cli_channel_connecting_i + 1
        END
    END
    ;

    p_con <-- is_channel_connected(p_channel) =
    BEGIN
        p_con := s_channel_connected_i(p_channel)
    END
    ;

    add_channel_connected(p_channel, p_timeref) =
    BEGIN
        s_channel_connected_i(p_channel) := TRUE;
        card_channel_connected_i := card_channel_connected_i + 1;
        a_channel_connected_time_i(p_channel) := p_timeref
    END
    ;

    set_config(p_channel, p_channel_config_idx) =
    BEGIN
        a_config_i    (p_channel)            := p_channel_config_idx;
        a_config_inv_i(p_channel_config_idx) := p_channel
    END
    ;

    set_endpoint(p_channel, p_endpoint_config_idx) =
    BEGIN
        a_endpoint_i(p_channel) := p_endpoint_config_idx
    END
    ;

    p_dom, p_config_idx <-- getall_channel_connected(p_channel) =
    BEGIN
        p_config_idx := a_config_i(p_channel);
        p_dom <-- is_t_channel_config_idx(p_config_idx);
        IF  p_dom = FALSE THEN
            p_config_idx := c_channel_config_idx_indet
        END
    END
    ;

    p_is_channel_connecting <-- is_cli_channel_connecting(p_config_idx) =
    BEGIN
        p_is_channel_connecting := s_cli_channel_connecting_i(p_config_idx)
    END
    ;

    add_cli_channel_disconnecting(p_config_idx) =
    BEGIN
        s_cli_channel_disconnecting_i(p_config_idx) := TRUE
    END
    ;

    remove_channel_connected(p_channel) =
    VAR
        l_res
    IN
        l_res := s_channel_connected_i(p_channel);
        IF  l_res = TRUE THEN
            s_channel_connected_i(p_channel) := FALSE;
            card_channel_connected_i := card_channel_connected_i - 1;
            a_channel_connected_time_i(p_channel) := c_timeref_indet
        END
    END
    ;

    remove_cli_channel_disconnecting(p_config_idx) =
    BEGIN
       s_cli_channel_disconnecting_i(p_config_idx) := FALSE
    END
    ;

    reset_config(p_channel) =
    VAR
        l_config_idx
    IN
        l_config_idx                 := a_config_i(p_channel);
        a_config_inv_i(l_config_idx) := c_channel_indet;
        a_config_i    (p_channel)    := c_channel_config_idx_indet
    END
    ;

    reset_endpoint(p_channel) =
    BEGIN
        a_endpoint_i(p_channel) := c_endpoint_config_idx_indet
    END
    ;

    remove_cli_channel_connecting(p_config_idx) =
    VAR
        l_res
    IN
        l_res := s_cli_channel_connecting_i(p_config_idx);
        IF  l_res = TRUE THEN
            s_cli_channel_connecting_i(p_config_idx) := FALSE;
            card_cli_channel_connecting_i := card_cli_channel_connecting_i - 1
        END
    END
    ;

    p_timeref <-- get_connection_time(p_channel) =
    BEGIN
        p_timeref := a_channel_connected_time_i(p_channel)
    END

END
