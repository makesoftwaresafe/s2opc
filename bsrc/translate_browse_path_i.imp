/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    translate_browse_path_i
REFINES
    translate_browse_path

SEES
    address_space_itf,
    constants,
    constants_statuscodes_bs,
    node_id_pointer_bs,
    message_in_bs,
    message_out_bs

IMPORTS
    translate_browse_path_1,
    msg_translate_browse_path_bs,
    translate_browse_path_element_it,
    translate_browse_path_source_it,
    translate_browse_path_result_it,
    browse_treatment

PROMOTES
    alloc_browse_path_result,
    write_translate_browse_paths_response,
    free_translate_browse_paths_response,
    read_nb_BrowsePaths,
    set_browse_value_context,
    set_browse_value_context_from_continuation_point,
    clear_browse_value_context,
    getall_and_move_browse_result,
    compute_browse_result,
    release_continuation_point,
    set_session_closed,
    continuation_points_UNINITIALISATION


LOCAL_OPERATIONS

    /* Fill BrowsePathResult with filtered browse result node
       Node in BrowsePathResult are a copy an should be freed
    */
    statusCode_operation <-- treat_one_relative_path_element(relativePathElt, index) =
    PRE
        relativePathElt : t_RelativePathElt_i &
        relativePathElt : t_RelativePathElt   &
        index : NAT1
    THEN
        statusCode_operation,
        BrowsePathResult,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        :(

            BrowsePathResult : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex  : seq(NAT1) &
            size(BrowsePathResult) <= k_n_BrowsePathResPerElt_max &
            size(BrowsePathRemainingNodeId) <= k_n_BrowsePathResPerElt_max  &
            size(BrowsePathRemainingIndex)  <= k_n_BrowsePathResPerElt_max  &
            size(BrowsePathRemainingNodeId)  = size(BrowsePathRemainingIndex) &

            statusCode_operation : t_StatusCode_i &
            statusCode_operation : {e_sc_ok, e_sc_bad_node_id_unknown,
                e_sc_bad_query_too_complex, e_sc_bad_no_match} &
            BrowsePathResult: seq(t_ExpandedNodeId_i) &
            ( statusCode_operation : { e_sc_ok, e_sc_uncertain_reference_out_of_server }
                =>
                /* all target in BrowsePathResult has browse name equal to TargetName and
                   there is a relation between this target and at least one source through Reference_TargetNode/RefIndex_Reference */
                !(target).( target :ran(BrowsePathResult) =>
                    /* 1. TargetName in relativePathElt is equals to Browse name of target */
                    RelativePathElt_TargetName(relativePathElt) = a_BrowseName(a_NodeId~(conv_ExpandedNodeId_NodeId(target))) &
                    /* 2. there is a source which is related to target */
                    #(source).(source : ran(BrowsePathSource) & card ( { lnode, lind | lnode = a_NodeId~(source) &
                        lind : 1..Node_RefIndexEnd(a_NodeId~(source)) &
                        target = Reference_TargetNode(RefIndex_Reference(lnode |-> lind)) &
                        ( RelativePathElt_ReferenceTypeId(relativePathElt) /= c_NodeId_indet
                          =>
                          /* TODO: use isReverse */
                          RelativePathElt_ReferenceTypeId(relativePathElt) = Reference_ReferenceType(RefIndex_Reference(lnode |-> lind))
                        ) &
                        RelativePathElt_IsInverse(relativePathElt) /= Reference_IsForward(RefIndex_Reference(lnode |-> lind))
                    } ) > 0 )
                )
            ) &
            ( statusCode_operation = e_sc_uncertain_reference_out_of_server
                =>
                size(BrowsePathRemainingNodeId) > 0
            )
        )
    END
    ;

    browseDirection <-- get_browseDirection_from_isInverse(isInverse) =
    PRE
        isInverse: BOOL
    THEN
          browseDirection :(
          browseDirection : t_BrowseDirection_i &
          browseDirection : t_BrowseDirection &
          (isInverse = TRUE => browseDirection = e_bd_inverse) &
          (isInverse = FALSE => browseDirection = e_bd_forward)
         )
    END
    ;

    translate_statusCode <-- get_translateStatus_from_browseStatus(browse_statusCode)=
    PRE
        browse_statusCode : t_StatusCode_i &
        browse_statusCode : t_StatusCode
    THEN
        translate_statusCode
        :(
            translate_statusCode : t_StatusCode_i &
            translate_statusCode :  {e_sc_ok, e_sc_bad_node_id_unknown, e_sc_bad_query_too_complex, c_StatusCode_indet} &
            (translate_statusCode = e_sc_ok => browse_statusCode = e_sc_ok ) &
            (translate_statusCode = e_sc_bad_node_id_unknown  => browse_statusCode : { e_sc_bad_node_id_unknown }) &
            (translate_statusCode = e_sc_bad_no_match  => browse_statusCode : { e_sc_bad_reference_type_id_invalid }) &
            (translate_statusCode = e_sc_bad_query_too_complex  => browse_statusCode : { e_sc_bad_out_of_memory, e_sc_bad_no_continuation_points, e_sc_bad_view_id_unknown}) &
            /* Case not specified in B model */
            (translate_statusCode = c_StatusCode_indet => browse_statusCode /: {e_sc_ok, e_sc_bad_out_of_memory, e_sc_bad_node_id_unknown,
                    e_sc_bad_reference_type_id_invalid, e_sc_bad_no_continuation_points,
                    e_sc_bad_view_id_unknown})
        )
    END
    ;

    StatusCode <-- check_startingNode(nodeid)=
    PRE
        nodeid : t_NodeId_i &
        nodeid : t_NodeId
    THEN
        IF nodeid = c_NodeId_indet
        THEN
            StatusCode := e_sc_bad_node_id_invalid
        ELSIF nodeid /: dom(a_NodeId~)
        THEN
            StatusCode := e_sc_bad_node_id_unknown
        ELSE
            StatusCode := e_sc_ok
        END
    END
    ;

    statusCode_operation <-- copy_browsePathResult_to_source =
    BEGIN
        statusCode_operation
        :(
            statusCode_operation: {e_sc_ok, e_sc_bad_out_of_memory} &
            (
                statusCode_operation = e_sc_ok
                =>
                BrowsePathSource =
                %(idx).(idx : 1..size(BrowsePathResult) &
                    BrowsePathResult(idx) : dom(conv_ExpandedNodeId_NodeId)
                    | conv_ExpandedNodeId_NodeId(BrowsePathResult(idx)))
            )
        )
    END
    ;

    free_BrowsePathResult =
    BEGIN
        BrowsePathResult := {}
    END
    ;

    free_BrowsePathRemaining =
    BEGIN
        BrowsePathRemainingNodeId := {} ||
        BrowsePathRemainingIndex  := {}
    END
    ;

    free_BrowsePathSource =
    BEGIN
        BrowsePathSource := {}
    END
    ;

    statusCode_operation <-- checkAndAdd_BrowsePathResult(expandedNodeId) =
    PRE
        expandedNodeId : t_ExpandedNodeId_i &
        expandedNodeId : t_ExpandedNodeId
    THEN
        statusCode_operation,
        BrowsePathResult
        :(
            statusCode_operation : {e_sc_ok, e_sc_bad_query_too_complex, e_sc_bad_out_of_memory} &
            (
                statusCode_operation = e_sc_ok
                =>
                BrowsePathResult = BrowsePathResult$0 <- expandedNodeId &
                size(BrowsePathResult) <= k_n_BrowsePathResPerElt_max
            ) &
            (
                statusCode_operation /= e_sc_ok
                =>
                BrowsePathResult = BrowsePathResult$0
            ) &
            (
                statusCode_operation = e_sc_bad_query_too_complex
                =>
                size(BrowsePathResult) = k_n_BrowsePathResPerElt_max
            )
        )

    END
    ;

    statusCode_operation <-- checkAndAdd_BrowsePathRemaining(expandedNodeId, index) =
    PRE
        expandedNodeId : t_ExpandedNodeId_i &
        expandedNodeId : t_ExpandedNodeId   &
        index : NAT1
    THEN
        statusCode_operation,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        :(
            statusCode_operation : {e_sc_uncertain_reference_out_of_server, e_sc_bad_query_too_complex, e_sc_bad_out_of_memory} &
            (
                statusCode_operation = e_sc_uncertain_reference_out_of_server
                =>
                BrowsePathRemainingNodeId = BrowsePathRemainingNodeId$0 <- expandedNodeId &
                BrowsePathRemainingIndex  = BrowsePathRemainingIndex$0 <- index &
                size(BrowsePathRemainingNodeId) <= k_n_BrowsePathResPerElt_max
            ) &
            (
                statusCode_operation /= e_sc_uncertain_reference_out_of_server
                =>
                BrowsePathRemainingNodeId = BrowsePathRemainingNodeId$0 &
                BrowsePathRemainingIndex  = BrowsePathRemainingIndex$0
            ) &
            (
                statusCode_operation = e_sc_bad_query_too_complex
                =>
                size(BrowsePathRemainingNodeId) = k_n_BrowsePathResPerElt_max
            )
        )
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, in_statusCode_operation) =
    PRE
        browsePath : t_BrowsePath_i  &
        browsePath : BrowsePaths     &
        in_statusCode_operation : t_StatusCode_i &
        in_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server}
    THEN
        out_statusCode_operation,
        BrowsePath_Res_Target_Node,
        BrowsePath_Res_Target_Index
        :(
            out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server, e_sc_bad_query_too_complex,
                e_sc_bad_out_of_memory, e_sc_bad_too_many_matches} &
            (out_statusCode_operation : { e_sc_ok, e_sc_uncertain_reference_out_of_server }
                =>
                BrowsePath_Res_Target_Node(browsePath) = BrowsePathResult^BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index(browsePath) = %(xx).(xx : 1..size(BrowsePathResult) | k_n_noRemainingPathIndex ) &
                (size(BrowsePathResult) + 1 .. size(BrowsePath_Res_Target_Index(browsePath))) <| BrowsePath_Res_Target_Index(browsePath) = BrowsePathRemainingIndex &
                size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePath_Res_Target_Index(browsePath))
            )
        )
    END
    ;

    statusCode_operation, nbReferences <-- compute_browse_result_from_source(source, browseDirection, referenceTypeId, includedSubtypes) =
    PRE
        source : t_NodeId_i &
        source : t_NodeId &
        browseDirection : t_BrowseDirection_i &
        browseDirection : t_BrowseDirection &
        referenceTypeId : t_NodeId_i &
        referenceTypeId : t_NodeId &
        includedSubtypes : BOOL
    THEN
        statusCode_operation,
        nbReferences
        :(
            statusCode_operation : t_StatusCode_i &
            statusCode_operation :  {e_sc_ok, e_sc_bad_node_id_unknown, e_sc_bad_query_too_complex, c_StatusCode_indet} &

            nbReferences : NAT &
            nbReferences <= k_n_BrowseTarget_max
        )
    END
    ;

    statusCode_operation <-- treat_browse_result_one_source(index, targetName, nbReferences) =
    PRE
        index : NAT1 &
        nbReferences : NAT &
        nbReferences : dom(out_BrowseResult_NodeId) &
        targetName : t_QualifiedName_i &
        targetName : t_QualifiedName
    THEN
        statusCode_operation,
        BrowsePathResult,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        :(

            BrowsePathResult : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex  : seq(NAT1) &
            size(BrowsePathResult) <= k_n_BrowsePathResPerElt_max &
            size(BrowsePathRemainingNodeId) <= k_n_BrowsePathResPerElt_max  &
            size(BrowsePathRemainingIndex)  <= k_n_BrowsePathResPerElt_max  &
            size(BrowsePathRemainingNodeId)  = size(BrowsePathRemainingIndex) &

            statusCode_operation : t_StatusCode_i &
            statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server, e_sc_bad_node_id_unknown,
                e_sc_bad_query_too_complex, e_sc_bad_no_match} &

            dom(BrowsePathResult$0) <| BrowsePathResult = BrowsePathResult$0 &
            dom(BrowsePathRemainingNodeId$0) <| BrowsePathRemainingNodeId = BrowsePathRemainingNodeId$0 &
            dom(BrowsePathRemainingIndex$0) <| BrowsePathRemainingIndex = BrowsePathRemainingIndex$0 &

            ( statusCode_operation : { e_sc_ok, e_sc_uncertain_reference_out_of_server }
                =>

                /* all target in BrowsePathResult has browse name equal to TargetName and
                is equal to a browse result */
                !(bpri).( bpri : size(BrowsePathResult$0)+1 .. size(BrowsePathResult) =>
                    #(bri).(bri : 1..nbReferences &
                        out_BrowseResult_NodeId(bri) = BrowsePathResult(bpri) &
                        out_BrowseResult_BrowseName(bri) = targetName))
            ) &
            ( statusCode_operation = e_sc_uncertain_reference_out_of_server
                =>
               BrowsePathRemainingNodeId /= BrowsePathRemainingNodeId$0 &
               !(bpri).( bpri : size(BrowsePathRemainingNodeId$0)+1 .. size(BrowsePathRemainingNodeId) =>
                   index = BrowsePathRemainingIndex(bpri) &
                    #(bri).(bri : 1..nbReferences &
                        out_BrowseResult_NodeId(bri) = BrowsePathRemainingNodeId(bpri) &
                        out_BrowseResult_BrowseName(bri) = targetName))
            ) &
            ( statusCode_operation = e_sc_ok
                =>
                BrowsePathRemainingNodeId = BrowsePathRemainingNodeId$0 &
                BrowsePathRemainingIndex = BrowsePathRemainingIndex$0
            )
        )
    END

OPERATIONS

    StatusCode_service <-- init_translate_browse_paths_request(req_msg) =
    VAR
        l_nb_BrowsePaths
    IN
        StatusCode_service <-- decode_translate_browse_paths_request(req_msg);
        IF StatusCode_service = e_sc_ok
        THEN
            l_nb_BrowsePaths <-- read_nb_BrowsePaths;
            IF l_nb_BrowsePaths = 0
            THEN
                StatusCode_service := e_sc_bad_nothing_to_do
            ELSE
                StatusCode_service <-- alloc_browse_path_result;
                IF StatusCode_service /= e_sc_ok
                THEN
                    StatusCode_service := e_sc_bad_too_many_ops
                END
            END
        END
    END
    ;

    treat_one_translate_browse_path(browsePath) =
    VAR
        l_statusCode_operation,
        l_statusCode_operation_2,
        l_continue,
        l_relativePath,
        l_relativePathElt,
        l_index,
        l_source,
        l_source_copy
    IN
        l_relativePath <-- read_BrowsePath_RelativePath(browsePath);
        l_source <-- read_BrowsePath_StartingNode(browsePath);
        l_continue <-- init_iter_relativePath(l_relativePath);
        l_statusCode_operation <-- check_startingNode(l_source);
        IF l_continue = FALSE
        THEN
            // There is no element in the path
            write_BrowsePath_Res_StatusCode(browsePath, e_sc_bad_nothing_to_do)
        ELSIF l_statusCode_operation /= e_sc_ok
        THEN
            write_BrowsePath_Res_StatusCode(browsePath, l_statusCode_operation)
        ELSE
            l_continue, l_source_copy <-- copy_node_id_pointer_content (l_source);
            l_index := 0;
            IF l_continue = TRUE THEN
                add_BrowsePathSource(l_source_copy) /* copy the source in source sequence */
            ELSE
                l_statusCode_operation := e_sc_bad_out_of_memory
            END
            ;

            /* Iterate on element list of the path
               - BrowsePathResult is reset at each step to keep only intermediate target
               - BrowsePathRemainingNodeId/Index are cumulative
               - Final target are last step BrowsePathResult + BrowsePathRemainingNodeId
            */
            WHILE l_continue = TRUE
            DO
                free_BrowsePathResult;
                l_continue, l_relativePathElt, l_index <-- continue_iter_relativePath;
                l_statusCode_operation <-- treat_one_relative_path_element(l_relativePathElt, l_index);

                free_BrowsePathSource;
                l_continue := bool(l_continue = TRUE &
                                   (l_statusCode_operation = e_sc_ok or
                                    l_statusCode_operation = e_sc_uncertain_reference_out_of_server));
                IF l_continue = TRUE
                THEN
                    l_statusCode_operation <-- copy_browsePathResult_to_source
                END

            INVARIANT
                elements_to_iterate : seq(t_RelativePathElt)  &
                elements_iterated   : seq(t_RelativePathElt)  &
                relativePath        : t_RelativePath_i        &
                relativePathEls     : seq(t_RelativePathElt)  &
                elements_iterated ^ elements_to_iterate = relativePathEls &
                l_continue = bool(size(elements_to_iterate) > 0 & (size(elements_iterated) = 0 or l_statusCode_operation = e_sc_ok ))     &
                l_statusCode_operation : { e_sc_ok, e_sc_uncertain_reference_out_of_server,
                    e_sc_bad_nothing_to_do, e_sc_bad_node_id_unknown,
                    e_sc_bad_query_too_complex, e_sc_bad_no_match} &
                (l_statusCode_operation  = e_sc_bad_nothing_to_do => size(relativePathEls) = 0) &
                (l_statusCode_operation /= e_sc_bad_nothing_to_do => size(relativePathEls) > 0) &
                (l_statusCode_operation = e_sc_ok
                    =>
                    size(BrowsePathResult) > 0 &
                    size(BrowsePathRemainingNodeId) = 0 &
                    size(BrowsePathRemainingIndex) = 0
                ) &

                (l_statusCode_operation = e_sc_uncertain_reference_out_of_server
                    =>
                    size(BrowsePathRemainingNodeId) > 0 &
                    size(BrowsePathRemainingNodeId) = size(BrowsePathRemainingIndex)
                ) &

                (l_statusCode_operation : { e_sc_bad_nothing_to_do, e_sc_bad_node_id_unknown,
                        e_sc_bad_query_too_complex, e_sc_bad_no_match }
                    =>
                    size(BrowsePathResult) = 0 &
                    size(BrowsePathRemainingNodeId) = 0 &
                    size(BrowsePathRemainingIndex) = 0

                ) &
                !(l_target).(
                    l_target : ran(BrowsePathResult)
                    =>
                    l_target /= c_ExpandedNodeId_indet &
                    l_target : dom(conv_ExpandedNodeId_NodeId)) &

                (   l_index = 0 &
                    l_continue = TRUE
                    =>
                    BrowsePathSource = { 1 |-> BrowsePath_StartingNode(browsePath)}
                ) &
                (   l_index > 0 &
                    l_continue = TRUE
                    =>
                    BrowsePathSource =
                    %(idx).(idx : 1..size(BrowsePathResult) &
                        BrowsePathResult(idx) : dom(conv_ExpandedNodeId_NodeId)
                        | conv_ExpandedNodeId_NodeId(BrowsePathResult(idx)))
                )

            VARIANT
                card(elements_to_iterate)
            END
            ;

            IF l_statusCode_operation = e_sc_ok or
                l_statusCode_operation = e_sc_uncertain_reference_out_of_server
            THEN
                l_statusCode_operation_2 := l_statusCode_operation;
                l_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, l_statusCode_operation_2)
            END
            ;
            write_BrowsePath_Res_StatusCode(browsePath, l_statusCode_operation);
            free_BrowsePathResult;
            free_BrowsePathRemaining
        END
    END
    ;

    /* LOCAL_OPERATION */

    statusCode_operation <-- treat_one_relative_path_element(relativePathElt, index) =
    VAR
        /* RelativePathElt info */
        l_referenceTypeId,
        l_isInverse,
        l_includedSubtypes,
        l_targetName,
        l_browseDirection,

        /* Browse treatment */
        l_nbReferences,

        l_name_empty,
        l_translate_statusCode,

        l_continue_source,
        l_source,
        l_size,
        l_index
    IN
        l_nbReferences := 0;

        /* Get RelativePathElt info for browse */
        l_referenceTypeId <-- read_RelativePathElt_ReferenceTypeId(relativePathElt);
        IF l_referenceTypeId  = c_NodeId_indet THEN
            /* Part 4: Services - Release 1.04
            Table 168 – RelativePath
            If not specified then all References are included and the parameter includeSubtypes is ignored.
            */
            l_includedSubtypes := FALSE
        ELSE
            l_includedSubtypes <-- read_RelativePathElt_IncludedSubtypes(relativePathElt)
        END
        ;
        l_isInverse <-- read_RelativePathElt_IsInverse(relativePathElt);
        l_targetName <-- read_RelativePathElt_TargetName(relativePathElt);
        l_browseDirection <-- get_browseDirection_from_isInverse(l_isInverse);

        l_name_empty <-- is_QualifiedNames_Empty(l_targetName);
        IF l_name_empty = TRUE THEN
            statusCode_operation := e_sc_bad_browse_name_invalid
        ELSE
            statusCode_operation := e_sc_bad_nothing_to_do;
            l_size <--get_BrowsePathSourceSize;
            l_continue_source <-- init_iter_browsePathSourceIdx(l_size);
            WHILE l_continue_source = TRUE
            DO
                l_continue_source, l_index <-- continue_iter_browsePathSourceIdx;
                l_source <-- get_BrowsePathSource(l_index);
                l_translate_statusCode,
                l_nbReferences
                <-- compute_browse_result_from_source(l_source,
                                                      l_browseDirection,
                                                      l_referenceTypeId,
                                                      l_includedSubtypes);
                ASSERT l_translate_statusCode /= c_StatusCode_indet THEN
                    /* Check browse result status */
                    IF l_translate_statusCode /= e_sc_ok THEN
                        statusCode_operation := l_translate_statusCode
                    ELSE
                        l_translate_statusCode <-- treat_browse_result_one_source(index, l_targetName, l_nbReferences);
                        IF statusCode_operation /= e_sc_ok THEN
                            statusCode_operation := l_translate_statusCode
                        END /* ELSE keep e_sc_ok status code for operation since it succeeded for at least one source */
                        ;
                        clear_browse_result
                    END
                END
            INVARIANT

                browsePathSourceIdx_to_iterate <: NAT1 &
                browsePathSourceIdx_iterated   <: NAT1 &
                browsePathSourceIdx_to_iterate /\ browsePathSourceIdx_iterated = {} &
                l_size = card(browsePathSourceIdx_to_iterate \/ browsePathSourceIdx_iterated) &
                browsePathSourceIdx_iterated = 1 .. l_index &
                browsePathSourceIdx_to_iterate = l_index + 1 .. l_size &
                l_continue_source = bool(l_index + 1 < l_size)
            VARIANT
                l_size - l_index
            END
        END
    END
    ;

    browseDirection <-- get_browseDirection_from_isInverse(isInverse) =
    IF isInverse = TRUE
    THEN
        browseDirection := e_bd_inverse
    ELSE
        browseDirection := e_bd_forward
    END
    ;

    translate_statusCode <-- get_translateStatus_from_browseStatus(browse_statusCode)=
    BEGIN
        /* Check browse result status */
        CASE browse_statusCode OF
            EITHER e_sc_bad_node_id_unknown
            THEN
                translate_statusCode := e_sc_bad_node_id_unknown
            OR e_sc_bad_reference_type_id_invalid
            THEN
                translate_statusCode := e_sc_bad_no_match
            OR e_sc_bad_out_of_memory, e_sc_bad_no_continuation_points, e_sc_bad_view_id_unknown
            THEN
                // e_sc_bad_view_id_unknown should not happen because view is indet
                translate_statusCode := e_sc_bad_query_too_complex
            OR e_sc_ok
            THEN
                translate_statusCode := e_sc_ok
            ELSE
                translate_statusCode := c_StatusCode_indet
            END
        END
    END
    ;

    StatusCode <-- check_startingNode(nodeid)=
    VAR
        l_isvalid,
        l_src_node
    IN
        StatusCode := e_sc_ok;
        IF nodeid = c_NodeId_indet
        THEN
            StatusCode := e_sc_bad_node_id_invalid
        ELSE
            l_isvalid, l_src_node <-- readall_AddressSpace_Node(nodeid);
            IF l_isvalid = FALSE
            THEN
                StatusCode := e_sc_bad_node_id_unknown
            END
        END
    END
    ;

    statusCode_operation <-- copy_browsePathResult_to_source =
    VAR
        l_size,
        l_continue,
        l_index,
        l_expandedNodeId,
        l_local_server,
        l_nodeId,
        l_alloc,
        l_source_copy
    IN
        statusCode_operation := e_sc_ok;
        l_size <-- get_BrowsePathResultSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        l_alloc := FALSE;
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            l_local_server, l_nodeId <-- getall_conv_ExpandedNodeId_NodeId(l_expandedNodeId);
            ASSERT l_local_server = TRUE THEN
                l_alloc, l_source_copy <-- copy_node_id_pointer_content (l_nodeId);
                IF l_alloc = TRUE THEN
                    add_BrowsePathSource(l_source_copy)
                ELSE
                    free_BrowsePathSource;
                    statusCode_operation := e_sc_bad_out_of_memory;
                    l_continue := FALSE
                END
            END
        INVARIANT

            (l_alloc = FALSE => BrowsePathSource = {})

        VARIANT
            0
        END
    END
    ;

    free_BrowsePathResult =
    VAR
        l_size,
        l_continue,
        l_index,
        l_expandedNodeId
    IN
        l_size <-- get_BrowsePathResultSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            free_ExpandedNodeId(l_expandedNodeId)
        INVARIANT
            TRUE = FALSE
        VARIANT
            0
        END
        ;
        init_BrowsePathResult
    END
    ;

    free_BrowsePathRemaining =
    VAR
        l_size,
        l_continue,
        l_index,
        l_expandedNodeId
    IN
        l_size <-- get_BrowsePathRemainingSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            free_ExpandedNodeId(l_expandedNodeId)
        INVARIANT
            TRUE = FALSE
        VARIANT
            0
        END
        ;
        init_BrowsePathRemaining
    END
    ;

    free_BrowsePathSource =
    VAR
        l_size,
        l_continue,
        l_index,
        l_nodeId
    IN
        l_size <-- get_BrowsePathSourceSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_nodeId <-- get_BrowsePathSource(l_index);
            free_node_id_pointer(l_nodeId)
        INVARIANT
            TRUE = FALSE
        VARIANT
            0
        END
        ;
        init_BrowsePathSource
    END
    ;

    statusCode_operation <-- checkAndAdd_BrowsePathResult(expandedNodeId) =
    VAR
        l_result_isFull,
        l_alloc,
        l_target_copy
    IN
        l_result_isFull <-- get_BrowsePathResult_IsFull;
        IF l_result_isFull = FALSE THEN
            l_alloc, l_target_copy  <-- get_copy_ExpandedNodeId(expandedNodeId);
            IF l_alloc = TRUE THEN
                add_BrowsePathResult(l_target_copy);
                statusCode_operation := e_sc_ok
            ELSE
                statusCode_operation := e_sc_bad_out_of_memory
            END
        ELSE
            statusCode_operation := e_sc_bad_query_too_complex
        END
       END
    ;

    statusCode_operation <-- checkAndAdd_BrowsePathRemaining(expandedNodeId, index) =
    VAR
        l_isFull,
        l_alloc,
        l_copy
    IN
        l_isFull <-- get_BrowsePathRemaining_IsFull;
        IF l_isFull = FALSE THEN
            l_alloc, l_copy  <-- get_copy_ExpandedNodeId(expandedNodeId);
            IF l_alloc = TRUE THEN
                add_BrowsePathResultRemaining(l_copy, index);
                statusCode_operation := e_sc_uncertain_reference_out_of_server
             ELSE
                statusCode_operation := e_sc_bad_out_of_memory
            END
        ELSE
            statusCode_operation := e_sc_bad_query_too_complex
        END
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, in_statusCode_operation) =
    VAR
        l_size,
        l_continue,
        l_index,
        l_size_result,
        l_size_remaining,
        l_statusCode_alloc,
        l_expandedNodeId,
        l_remainingIndex
    IN
        out_statusCode_operation := in_statusCode_operation;
        l_size_result <-- get_BrowsePathResultSize;
        l_size_remaining <-- get_BrowsePathRemainingSize;
        l_size := l_size_result + l_size_remaining;
        IF l_size <= k_n_BrowsePathResPerPath_max THEN
            l_statusCode_alloc <-- alloc_BrowsePath_Res_Target(browsePath, l_size);
            IF l_statusCode_alloc = e_sc_ok THEN
                /* Move result from BrowsePathResult */
                l_continue <-- init_iter_browsePathSourceIdx(l_size_result);
                l_index := 0;
                WHILE l_continue = TRUE
                DO
                    l_continue, l_index <-- continue_iter_browsePathSourceIdx;
                    l_expandedNodeId <-- get_BrowsePathResult(l_index);
                    l_statusCode_alloc <-- add_BrowsePath_Res_Target(browsePath, l_expandedNodeId);
                    IF l_statusCode_alloc /= e_sc_ok THEN
                        out_statusCode_operation := e_sc_bad_out_of_memory;
                        l_continue := FALSE
                    END
                INVARIANT

                    browsePathSourceIdx_to_iterate <: NAT1 &
                    browsePathSourceIdx_iterated   <: NAT1 &
                    browsePathSourceIdx_to_iterate /\ browsePathSourceIdx_iterated = {} &
                    l_size_result = card(browsePathSourceIdx_to_iterate \/ browsePathSourceIdx_iterated) &
                    browsePathSourceIdx_iterated = 1 .. l_index &
                    browsePathSourceIdx_to_iterate = l_index + 1 .. l_size_result &
                    l_continue = bool(l_statusCode_alloc = e_sc_ok & (l_index + 1 < l_size_result)) &
                    (l_statusCode_alloc = e_sc_ok
                        =>
                        1..l_index <| BrowsePath_Res_Target_Node(browsePath) = 1..l_index <| BrowsePathResult &
                        1..l_index <| BrowsePath_Res_Target_Index(browsePath) = %(xx).(xx : 1..l_index | k_n_noRemainingPathIndex ))
                VARIANT
                    l_size_result - l_index
                END
                ;

                l_continue <-- init_iter_browsePathSourceIdx(l_size_remaining);
                l_continue := bool(l_statusCode_alloc = e_sc_ok & l_continue = TRUE);
                l_index := 0;
                WHILE l_continue = TRUE
                DO
                    l_continue, l_index <-- continue_iter_browsePathSourceIdx;
                    l_expandedNodeId, l_remainingIndex <-- get_BrowsePathRemaining(l_index);
                    l_statusCode_alloc <-- add_BrowsePath_Res_Target_withRemainingPath(browsePath, l_expandedNodeId, l_remainingIndex);
                    IF l_statusCode_alloc /= e_sc_ok THEN
                        out_statusCode_operation := e_sc_bad_out_of_memory;
                        l_continue := FALSE
                    END
                INVARIANT

                    browsePathSourceIdx_to_iterate <: NAT1 &
                    browsePathSourceIdx_iterated   <: NAT1 &
                    browsePathSourceIdx_to_iterate /\ browsePathSourceIdx_iterated = {} &
                    l_size_remaining = card(browsePathSourceIdx_to_iterate \/ browsePathSourceIdx_iterated) &
                    browsePathSourceIdx_iterated = 1 .. l_index &
                    browsePathSourceIdx_to_iterate = l_index + 1 .. l_size_remaining &
                    l_continue = bool(l_statusCode_alloc = e_sc_ok & (l_index + 1 < l_size_remaining)) &
                    (l_statusCode_alloc = e_sc_ok
                        =>
                        1..l_size_result <| BrowsePath_Res_Target_Node(browsePath) = BrowsePathResult &
                        1..l_size_result <| BrowsePath_Res_Target_Index(browsePath) = %(xx).(xx : 1..l_size_result | k_n_noRemainingPathIndex ) &
                        (l_size_result + 1) .. (l_size_result + l_index) <| BrowsePath_Res_Target_Node(browsePath) = 1..l_index <| BrowsePathRemainingNodeId &
                        (l_size_result + 1) .. (l_size_result + l_index) <| BrowsePath_Res_Target_Index(browsePath) = 1..l_index <| BrowsePathRemainingIndex)

                VARIANT
                    l_size_remaining - l_index
                END
            ELSE
                out_statusCode_operation := e_sc_bad_out_of_memory
            END
        ELSE
            out_statusCode_operation := e_sc_bad_too_many_matches
        END

    END
    ;

    statusCode_operation, nbReferences <-- compute_browse_result_from_source(source, browseDirection, referenceTypeId, includedSubtypes) =
    VAR
        l_browse_statusCode,
        l_continuationPoint
    IN
        nbReferences := 0;
        statusCode_operation <-- set_browse_value_context(c_session_indet, 0, c_NodeId_indet, source,
            browseDirection, referenceTypeId, includedSubtypes,
            c_BrowseNodeClassMask_indet, c_BrowseResultMask_all, FALSE);
        IF statusCode_operation = e_sc_ok THEN
            l_browse_statusCode,
            l_continuationPoint,
            nbReferences <-- compute_browse_result;
            clear_browse_value_context;
            statusCode_operation <-- get_translateStatus_from_browseStatus(l_browse_statusCode)
        END
    END
    ;

    statusCode_operation <-- treat_browse_result_one_source(index, targetName, nbReferences) =
    VAR
        l_continue,
        l_browseResult_index,
        l_res_refTypeId,
        l_res_isForward,
        l_res_ExpandedNodeId,
        l_res_BrowseName,
        l_res_DisplayName,
        l_res_NodeClass,
        l_res_TypeDefinition,
        l_found,
        l_translate_statusCode,
        l_local_server,
        l_source_tmp
    IN
        // No nodeId is found
        statusCode_operation := e_sc_bad_no_match;
        l_continue <-- init_iter_translate_browseResult(nbReferences);
        WHILE l_continue = TRUE
        DO
            l_continue, l_browseResult_index <-- continue_iter_translate_browseResult;
            l_res_refTypeId,
            l_res_isForward,
            l_res_ExpandedNodeId,
            l_res_BrowseName,
            l_res_DisplayName,
            l_res_NodeClass,
            l_res_TypeDefinition
            <-- getall_browse_result_reference_at(l_browseResult_index);

            l_found <-- is_QualifiedNames_Equal(targetName, l_res_BrowseName);
            IF l_found = TRUE THEN
                /* Add in result if there is enough space */
                l_translate_statusCode <-- checkAndAdd_BrowsePathResult(l_res_ExpandedNodeId);
                /* keep old status if operation is OK but get an out of server previoulsy */
                IF (l_translate_statusCode = e_sc_ok & statusCode_operation = e_sc_uncertain_reference_out_of_server) THEN
                    skip
                ELSE
                    statusCode_operation := l_translate_statusCode
                END
            ELSIF l_res_ExpandedNodeId /= c_ExpandedNodeId_indet
            THEN
                // check expandedNodeId is local, and get associated nodeId if exists
                l_local_server, l_source_tmp <-- getall_conv_ExpandedNodeId_NodeId(l_res_ExpandedNodeId);
                IF l_local_server = FALSE
                THEN
                    statusCode_operation <-- checkAndAdd_BrowsePathRemaining(l_res_ExpandedNodeId, index)
                END
            END
            ;
            l_continue := bool(l_continue = TRUE &
                (statusCode_operation = e_sc_ok or
                    statusCode_operation =  e_sc_uncertain_reference_out_of_server or
                    statusCode_operation =  e_sc_bad_no_match))

        INVARIANT
            l_continue = bool(translate_browseResult_to_iterate = {}) &
            nb_translate_browseResult_max_refs : NAT &
            translate_browseResult_to_iterate <: NAT &
            translate_browseResult_iterated   <: NAT &
            translate_browseResult_to_iterate /\ translate_browseResult_iterated = {} &
            nb_translate_browseResult_max_refs = card(translate_browseResult_to_iterate \/ translate_browseResult_iterated)
        VARIANT
            card(translate_browseResult_to_iterate)
        END
    END

END
