/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    service_read_i

REFINES
    service_read

SEES
    constants,
    constants_statuscodes_bs,
    address_space_itf,
    message_in_bs,
    message_out_bs

IMPORTS
    service_read_1

OPERATIONS

    StatusCode_service <-- treat_read_request(p_user, p_locales, p_request_msg, p_response_msg) =
    VAR
        l_nb_ReadValue,
        l_is_valid,
        l_TimestampsToReturn
    IN
        l_is_valid, l_nb_ReadValue, l_TimestampsToReturn, StatusCode_service <-- check_ReadRequest(p_request_msg);
        IF  l_is_valid = TRUE THEN
            l_is_valid <-- alloc_read_response(l_nb_ReadValue, p_response_msg);
            IF  l_is_valid = TRUE THEN
                fill_read_response(l_TimestampsToReturn, p_user, p_locales, p_request_msg, p_response_msg)
            ELSE
                StatusCode_service := e_sc_bad_out_of_memory
            END
        END
    END

END
